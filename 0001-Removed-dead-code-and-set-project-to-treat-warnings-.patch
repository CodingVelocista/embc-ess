From 0c43173ae4425f41b5d69ee5122d3b70cb3057eb Mon Sep 17 00:00:00 2001
From: Yossi Tamari <yossi.tamari@quartech.com>
Date: Mon, 29 Apr 2019 13:10:46 -0700
Subject: [PATCH] Removed dead code and set project to treat warnings as errors

---
 embc-app/Authentication/UserSettings.cs       | 127 -------
 .../ClaimsPrincipalExtensions.cs              |  58 ----
 .../Authorization/MvcOptionsExtensions.cs     |  31 --
 embc-app/Authorization/PermissionHandler.cs   | 112 ------
 .../Authorization/PermissionRequirement.cs    |  25 --
 .../RequiresPermissionAttribute.cs            |  75 ----
 embc-app/Authorization/User.cs                |  23 --
 embc-app/Authorization/UserModelExtensions.cs | 122 -------
 embc-app/Controllers/LoadTestController.cs    |  47 ---
 .../Controllers/OrganizationsController.cs    |   4 +-
 embc-app/Controllers/SystemusersController.cs |  48 ---
 .../DataInterfaces/CommunityExtensions.cs     | 120 -------
 embc-app/DataInterfaces/CountryExtensions.cs  | 109 ------
 .../DataInterface.Organization.cs             |   7 +-
 .../FamilyRelationshipTypeExtensions.cs       | 111 ------
 embc-app/DataInterfaces/IDataInterface.cs     |   2 +-
 .../DataInterfaces/IncidentTaskExtensions.cs  |  96 ------
 .../DataInterfaces/OrganizationExtensions.cs  |  77 -----
 embc-app/DataInterfaces/RegionExtensions.cs   | 108 ------
 embc-app/DataInterfaces/UserExtensions.cs     | 147 --------
 .../DataInterfaces/VolunteerExtensions.cs     |  75 ----
 embc-app/DynamicsExtensions/Common.cs         | 152 ---------
 embc-app/Models.Extensions/Permission.cs      |  85 -----
 embc-app/Models.Extensions/Role.cs            |  37 --
 embc-app/Models/CacheKeys.cs                  |  13 -
 embc-app/Models/Permission.cs                 | 200 -----------
 embc-app/Models/Role.cs                       | 209 ------------
 embc-app/Models/RolePermission.cs             | 188 ----------
 embc-app/Models/User.cs                       | 323 ------------------
 embc-app/Models/UserRole.cs                   | 193 -----------
 embc-app/Startup.cs                           |  52 ---
 embc-app/Utils/BusinessNumberSanitizer.cs     |  34 --
 embc-app/Utils/EncryptionUtility.cs           |  96 ------
 embc-app/Utils/GuidUtility.cs                 | 147 --------
 embc-app/Utils/IQueryableExtensions.cs        |  12 +-
 embc-app/Utils/LoggingEvents.cs               |  25 --
 embc-app/Utils/TestUtility.cs                 |  20 --
 embc-app/embc-app.csproj                      |   5 +
 38 files changed, 16 insertions(+), 3299 deletions(-)
 delete mode 100644 embc-app/Authentication/UserSettings.cs
 delete mode 100644 embc-app/Authorization/ClaimsPrincipalExtensions.cs
 delete mode 100644 embc-app/Authorization/MvcOptionsExtensions.cs
 delete mode 100644 embc-app/Authorization/PermissionHandler.cs
 delete mode 100644 embc-app/Authorization/PermissionRequirement.cs
 delete mode 100644 embc-app/Authorization/RequiresPermissionAttribute.cs
 delete mode 100644 embc-app/Authorization/User.cs
 delete mode 100644 embc-app/Authorization/UserModelExtensions.cs
 delete mode 100644 embc-app/Controllers/LoadTestController.cs
 delete mode 100644 embc-app/Controllers/SystemusersController.cs
 delete mode 100644 embc-app/DataInterfaces/CommunityExtensions.cs
 delete mode 100644 embc-app/DataInterfaces/CountryExtensions.cs
 delete mode 100644 embc-app/DataInterfaces/FamilyRelationshipTypeExtensions.cs
 delete mode 100644 embc-app/DataInterfaces/IncidentTaskExtensions.cs
 delete mode 100644 embc-app/DataInterfaces/OrganizationExtensions.cs
 delete mode 100644 embc-app/DataInterfaces/RegionExtensions.cs
 delete mode 100644 embc-app/DataInterfaces/UserExtensions.cs
 delete mode 100644 embc-app/DataInterfaces/VolunteerExtensions.cs
 delete mode 100644 embc-app/DynamicsExtensions/Common.cs
 delete mode 100644 embc-app/Models.Extensions/Permission.cs
 delete mode 100644 embc-app/Models.Extensions/Role.cs
 delete mode 100644 embc-app/Models/CacheKeys.cs
 delete mode 100644 embc-app/Models/Permission.cs
 delete mode 100644 embc-app/Models/Role.cs
 delete mode 100644 embc-app/Models/RolePermission.cs
 delete mode 100644 embc-app/Models/User.cs
 delete mode 100644 embc-app/Models/UserRole.cs
 delete mode 100644 embc-app/Utils/BusinessNumberSanitizer.cs
 delete mode 100644 embc-app/Utils/EncryptionUtility.cs
 delete mode 100644 embc-app/Utils/GuidUtility.cs
 delete mode 100644 embc-app/Utils/LoggingEvents.cs
 delete mode 100644 embc-app/Utils/TestUtility.cs

diff --git a/embc-app/Authentication/UserSettings.cs b/embc-app/Authentication/UserSettings.cs
deleted file mode 100644
index a694dd2..0000000
--- a/embc-app/Authentication/UserSettings.cs
+++ /dev/null
@@ -1,127 +0,0 @@
-using Gov.Jag.Embc.Public.Models;
-using Microsoft.AspNetCore.Http;
-using Newtonsoft.Json;
-using System;
-
-namespace Gov.Jag.Embc.Public.Authentication
-{
-    /// <summary>
-    /// Object to track and manage the authenticated user session
-    /// </summary>
-    public class UserSettings
-    {
-        /// <summary>
-        /// True if user is authenticated
-        /// </summary>
-        public bool UserAuthenticated { get; set; }
-
-        /// <summary>
-        /// SiteMinder User Id
-        /// </summary>
-        public string UserId { get; set; }
-
-        /// <summary>
-        /// SiteMinder Guid
-        /// </summary>
-        public string SiteMinderGuid { get; set; }
-
-        public string SiteMinderBusinessGuid { get; set; }
-
-        public string UserDisplayName { get; set; }
-        public string BusinessLegalName { get; set; }
-        public string UserType { get; set; }
-
-        /// <summary>
-        /// AuthenticatedUser User Model
-        /// </summary>
-        public User AuthenticatedUser { get; set; }
-
-        public bool IsNewUser { get; set; }
-
-        public string ContactId { get; set; }
-        public string AccountId { get; set; }
-
-        public string[] AppRoles { get; set; }
-
-        /// <summary>
-        /// Worker qualification requires new contact info.
-        /// </summary>
-        public ViewModels.Person NewContact { get; set; }
-
-        /// <summary>
-        /// Check the UserSettings object and throw an exception if it is invalid.
-        /// </summary>
-        public void Validate()
-        {
-            if (AccountId == null && ContactId == null)
-            {
-                throw new Exception("UserSettings Validation Error:  AccountId is null and ContactID is null");
-            }
-
-            if (AccountId == null && UserType == "Business")
-            {
-                throw new Exception("UserSettings Validation Error:  AccountId is null");
-            }
-
-            if (ContactId == null)
-            {
-                throw new Exception("UserSettings Validation Error:  ContactId is null");
-            }
-        }
-
-        /// <summary>
-        /// Serializes UserSettings as a Json String
-        /// </summary>
-        /// <returns></returns>
-        public string GetJson()
-        {
-            // write metadata
-            string json = JsonConvert.SerializeObject(this, Formatting.Indented,
-                new JsonSerializerSettings
-                {
-                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
-                }
-                );
-
-            return json;
-        }
-
-        /// <summary>
-        /// Create UserSettings object from a Serialized Json String
-        /// </summary>
-        /// <param name="json"></param>
-        /// <returns></returns>
-        public static UserSettings CreateFromJson(string json)
-        {
-            UserSettings temp = JsonConvert.DeserializeObject<UserSettings>(json);
-            return temp;
-        }
-
-        /// <summary>
-        /// Save UserSettings to Session
-        /// </summary>
-        /// <param name="userSettings"></param>
-        /// <param name="context"></param>
-        public static void SaveUserSettings(UserSettings userSettings, HttpContext context)
-        {
-            string temp = userSettings.GetJson();
-            context.Session.SetString("UserSettings", temp);
-        }
-
-        /// <summary>
-        /// Retrieve UserSettings from Session
-        /// </summary>
-        /// <param name="context"></param>
-        /// <returns></returns>
-        public static UserSettings ReadUserSettings(HttpContext context)
-        {
-            UserSettings userSettings = new UserSettings();
-
-            if (context.Session.GetString("UserSettings") == null) return userSettings;
-
-            string settingsTemp = context.Session.GetString("UserSettings");
-
-            return !string.IsNullOrEmpty(settingsTemp) ? CreateFromJson(settingsTemp) : userSettings;
-        }
-    }
-}
diff --git a/embc-app/Authorization/ClaimsPrincipalExtensions.cs b/embc-app/Authorization/ClaimsPrincipalExtensions.cs
deleted file mode 100644
index e0f4fa0..0000000
--- a/embc-app/Authorization/ClaimsPrincipalExtensions.cs
+++ /dev/null
@@ -1,58 +0,0 @@
-ï»¿using System;
-using Gov.Jag.Embc.Public.Models;
-using System.Security.Claims;
-
-namespace Gov.Jag.Embc.Public.Authorization
-{
-    /// <summary>
-    /// Calaims Principal Extension
-    /// </summary>
-    public static class ClaimsPrincipalExtensions
-    {        
-        /// <summary>
-        /// Check if the user has permission to execute the method
-        /// </summary>
-        /// <param name="user"></param>
-        /// <param name="permissions"></param>
-        /// <returns></returns>
-        public static bool HasPermissions(this ClaimsPrincipal user, params string[] permissions)
-        {            
-            if (!user.HasClaim(c => c.Type == User.PermissionClaim))
-                return false;
-
-            bool hasRequiredPermissions = false;
-
-            if (!user.HasClaim(c => c.Type == User.PermissionClaim))
-                return false;
-
-            if (user.HasClaim(c => c.Type == User.PermissionClaim))                
-            {
-                bool hasPermissions = true;
-                
-                foreach (string permission in permissions)
-                {
-                    if (!user.HasClaim(User.PermissionClaim, permission))
-                    {
-                        hasPermissions = false;
-                        break;
-                    }
-                }
-                
-                hasRequiredPermissions = hasPermissions;
-            }
-            
-            return hasRequiredPermissions;
-        }
-
-        /// <summary>
-        /// Check if the user is a member if the group
-        /// </summary>
-        /// <param name="user"></param>
-        /// <param name="group"></param>
-        /// <returns></returns>
-        public static bool IsInGroup(this ClaimsPrincipal user, string group)
-        {
-            return user.HasClaim(c => c.Type == ClaimTypes.GroupSid && c.Value.Equals(group, StringComparison.OrdinalIgnoreCase));
-        }
-    }
-}
diff --git a/embc-app/Authorization/MvcOptionsExtensions.cs b/embc-app/Authorization/MvcOptionsExtensions.cs
deleted file mode 100644
index 8adf856..0000000
--- a/embc-app/Authorization/MvcOptionsExtensions.cs
+++ /dev/null
@@ -1,31 +0,0 @@
-ï»¿using Microsoft.AspNetCore.Authorization;
-using Microsoft.AspNetCore.Mvc;
-using Microsoft.AspNetCore.Mvc.Authorization;
-using Gov.Jag.Embc.Public.Models;
-
-namespace Gov.Jag.Embc.Public.Authorization
-{
-    /// <summary>
-    /// MVC Options Extension
-    /// </summary>
-    public static class MvcOptionsExtensions
-    {
-        /// <summary>
-        /// Add Authorization Policy
-        /// </summary>
-        /// <param name="options"></param>
-        /// <returns></returns>
-        public static MvcOptions AddDefaultAuthorizationPolicyFilter(this MvcOptions options)
-        {
-            // Default authorization policy enforced via a global authorization filter
-            AuthorizationPolicy requireLoginPolicy = new AuthorizationPolicyBuilder()
-                .RequireAuthenticatedUser()
-                .RequireClaim(User.PermissionClaim, Permission.Login)
-                .Build();
-
-            AuthorizeFilter filter = new AuthorizeFilter(requireLoginPolicy);
-            options.Filters.Add(filter);
-            return options;
-        }
-    }
-}
diff --git a/embc-app/Authorization/PermissionHandler.cs b/embc-app/Authorization/PermissionHandler.cs
deleted file mode 100644
index 5e1aa1f..0000000
--- a/embc-app/Authorization/PermissionHandler.cs
+++ /dev/null
@@ -1,112 +0,0 @@
-ï»¿using Microsoft.AspNetCore.Authorization;
-using Microsoft.Extensions.DependencyInjection;
-using System.Linq;
-using System.Threading.Tasks;
-using Microsoft.AspNetCore.Hosting;
-using Microsoft.AspNetCore.Http;
-
-namespace Gov.Jag.Embc.Public.Authorization
-{
-    /// <summary>
-    /// Permission Handler Extension
-    /// </summary>
-    public static class PermissionHandlerExtensions
-    {
-        /// <summary>
-        /// Registers <see cref="PermissionHandler"/> with Dependency Injection.
-        /// </summary>
-        /// <param name="services"></param>
-        /// <returns></returns>
-        public static IServiceCollection RegisterPermissionHandler(this IServiceCollection services)
-        {
-            return services.AddSingleton<IAuthorizationHandler, PermissionHandler>();
-        }
-    }
-
-    /// <summary>
-    /// Permission handler
-    /// </summary>
-    /// <remarks>
-    /// Must be registered with Dependency Injection
-    /// </remarks>
-    public class PermissionHandler : AuthorizationHandler<PermissionRequirement>
-    {
-        private readonly HttpContext _httpContext;
-        private readonly IHostingEnvironment _hostingEnv;
-
-        public PermissionHandler(IHttpContextAccessor httpContextAccessor, IHostingEnvironment hostingEnv)
-        {
-            _httpContext = httpContextAccessor.HttpContext;
-            _hostingEnv = hostingEnv;
-        }       
-
-        /// <summary>
-        /// Permission Handler
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="requirement"></param>
-        /// <returns></returns>
-        protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement)
-        {            
-            // **************************************************
-            // Check if we have a Dev Environment Cookie
-            // **************************************************
-            if (!_hostingEnv.IsProduction())
-            {
-                string temp = _httpContext.Request.Cookies["DEV-USER"];
-
-                if (string.IsNullOrEmpty(temp))
-                { 
-                    // may be a dev header.
-                    temp = _httpContext.Request.Headers["DEV-USER"];
-                }
-
-
-                if (!string.IsNullOrEmpty(temp))
-                {
-                    // access granted
-                    context.Succeed(requirement);
-
-                    await Task.CompletedTask;
-                    return;
-                }
-				else
-				{
-					temp = _httpContext.Request.Cookies["DEV-BCSC-USER"];
-
-                    if (string.IsNullOrEmpty(temp))
-                    {
-                        // may be a dev header.
-                        temp = _httpContext.Request.Headers["DEV-BCSC-USER"];
-                    }
-
-
-                    if (!string.IsNullOrEmpty(temp))
-                    {
-                        // access granted
-                        context.Succeed(requirement);
-
-                        await Task.CompletedTask;
-                        return;
-                    }
-				}
-            }
-            
-            // **************************************************
-            // If not - check the users permissions
-            // **************************************************
-            if (context.User.HasPermissions(requirement.RequiredPermissions.ToArray()))
-            {
-                // access granted
-                context.Succeed(requirement);
-            }
-            else
-            {
-                // access denied
-                context.Fail();
-            }
-
-            await Task.CompletedTask;
-        }
-    }
-}
diff --git a/embc-app/Authorization/PermissionRequirement.cs b/embc-app/Authorization/PermissionRequirement.cs
deleted file mode 100644
index 1241e5f..0000000
--- a/embc-app/Authorization/PermissionRequirement.cs
+++ /dev/null
@@ -1,25 +0,0 @@
-ï»¿using Microsoft.AspNetCore.Authorization;
-using System.Collections.Generic;
-
-namespace Gov.Jag.Embc.Public.Authorization
-{
-    /// <summary>
-    /// Permission Requirements
-    /// </summary>
-    public class PermissionRequirement : IAuthorizationRequirement
-    {
-        /// <summary>
-        /// All required permissions
-        /// </summary>
-        public IEnumerable<string> RequiredPermissions { get; }
-
-        /// <summary>
-        /// Set required permissions
-        /// </summary>
-        /// <param name="permissions"></param>
-        public PermissionRequirement(params string[] permissions)
-        {
-            RequiredPermissions = permissions;
-        }
-    }
-}
diff --git a/embc-app/Authorization/RequiresPermissionAttribute.cs b/embc-app/Authorization/RequiresPermissionAttribute.cs
deleted file mode 100644
index 4dcf886..0000000
--- a/embc-app/Authorization/RequiresPermissionAttribute.cs
+++ /dev/null
@@ -1,75 +0,0 @@
-ï»¿using Microsoft.AspNetCore.Authorization;
-using Microsoft.AspNetCore.Mvc;
-using Microsoft.AspNetCore.Mvc.Filters;
-using System;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.AspNetCore.Http;
-
-namespace Gov.Jag.Embc.Public.Authorization
-{
-    /// <summary>
-    /// Allows declarative claims based permissions to be applied to controller methods for authorization.
-    /// </summary>    
-    public class RequiresPermissionAttribute : TypeFilterAttribute
-    {
-        /// <summary>
-        /// Attribute Extension - Permissions Required
-        /// </summary>
-        /// <param name="permissions"></param>
-        public RequiresPermissionAttribute(params string[] permissions)
-           : base(typeof(ImplementationRequiresPermissionAttribute))
-        {
-            Arguments = new object[] { new PermissionRequirement(permissions) };
-        }
-
-        /// <summary>
-        /// Permission verification
-        /// </summary>
-        public class ImplementationRequiresPermissionAttribute : Attribute, IAsyncResourceFilter
-        {
-            private readonly IAuthorizationService _authService;
-            private readonly PermissionRequirement _requiredPermissions;
-
-            /// <summary>
-            /// Implements permission verification
-            /// </summary>
-            /// <param name="authService"></param>
-            /// <param name="requiredPermissions"></param>
-            public ImplementationRequiresPermissionAttribute(IAuthorizationService authService, PermissionRequirement requiredPermissions)
-            {
-                _authService = authService;
-                _requiredPermissions = requiredPermissions;
-            }
-
-            /// <summary>
-            /// Validate authorization
-            /// </summary>
-            /// <param name="context"></param>
-            /// <param name="next"></param>
-            /// <returns></returns>
-            public async Task OnResourceExecutionAsync(ResourceExecutingContext context, ResourceExecutionDelegate next)
-            {
-                AuthorizationResult result = await _authService.AuthorizeAsync(context.HttpContext.User,
-                    context.ActionDescriptor.DisplayName,
-                    _requiredPermissions);
-
-                if (!result.Succeeded)
-                {
-                    context.Result = new UnauthorizedResult();
-
-                    HttpResponse response = context.HttpContext.Response;                          
-
-                    string responseText = "<HTML><HEAD><META http-equiv=\"Content - Type\" content=\"text / html; charset = windows - 1252\"></HEAD><BODY></BODY></HTML>";
-                    byte[] data = Encoding.UTF8.GetBytes(responseText);
-
-                    response.StatusCode = 403; // forbidden
-                    response.Body.Write(data, 0, data.Length);
-                    await response.Body.FlushAsync();
-                }
-
-                await next();                
-            }
-        }
-    }
-}
diff --git a/embc-app/Authorization/User.cs b/embc-app/Authorization/User.cs
deleted file mode 100644
index 49208ac..0000000
--- a/embc-app/Authorization/User.cs
+++ /dev/null
@@ -1,23 +0,0 @@
-ï»¿namespace Gov.Jag.Embc.Public.Models
-{
-    /// <summary>
-    /// User Extension (to support authorization)
-    /// </summary>
-    public sealed partial class User
-    {
-        /// <summary>
-        /// User Permission Claim Property
-        /// </summary>
-        public const string PermissionClaim = "permission_claim";
-
-        /// <summary>
-        /// UserId Claim Property
-        /// </summary>
-        public const string UseridClaim = "userid_claim";
-
-        /// <summary>
-        /// User Type Claim Property
-        /// </summary>
-        public const string UserTypeClaim = "usertype_claim";
-    }
-}
diff --git a/embc-app/Authorization/UserModelExtensions.cs b/embc-app/Authorization/UserModelExtensions.cs
deleted file mode 100644
index 4b73cf4..0000000
--- a/embc-app/Authorization/UserModelExtensions.cs
+++ /dev/null
@@ -1,122 +0,0 @@
-ï»¿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Security.Claims;
-
-namespace Gov.Jag.Embc.Public.Models
-{
-    /// <summary>
-    /// User Model Extension
-    /// </summary>
-    public static class UserModelExtensions
-    {
-        /// <summary>
-        /// Convert User to ClaimsPrincipal
-        /// </summary>
-        /// <param name="user"></param>
-        /// <param name="authenticationType"></param>
-        /// <returns></returns>
-        public static ClaimsPrincipal ToClaimsPrincipal(this User user, string authenticationType, string userType)
-        {
-            return new ClaimsPrincipal(user.ToClaimsIdentity(authenticationType, userType));
-        }
-
-        private static ClaimsIdentity ToClaimsIdentity(this User user, string authenticationType, string userType)
-        {
-            return new ClaimsIdentity(user.GetClaims(userType), authenticationType);
-        }
-
-        private static List<Claim> GetClaims(this User user, string userType)
-        {
-            List<Claim> claims = new List<Claim>();
-            if (user == null ) //a user is only a new users if they are a BCeID user or BC service card
-            {
-                claims.Add(new Claim(User.PermissionClaim, Permission.NewUserRegistration));
-                claims.Add(new Claim(User.UserTypeClaim, userType));
-            }
-            else
-            {
-                if (!string.IsNullOrEmpty(user.SmUserId))
-                {
-                    claims.Add(new Claim(ClaimTypes.Name, user.SmUserId));
-                }
-                
-                if (!string.IsNullOrEmpty(user.Surname))
-                {
-                    claims.Add(new Claim(ClaimTypes.Surname, user.Surname));
-                }
-                    
-                if (!string.IsNullOrEmpty(user.GivenName))
-                {
-                    claims.Add(new Claim(ClaimTypes.GivenName, user.GivenName));
-                }
-                    
-                if (!string.IsNullOrEmpty(user.Email))
-                {
-                    claims.Add(new Claim(ClaimTypes.Email, user.Email));
-                }                    
-
-                if (user.ContactId != null)
-                {
-                    claims.Add(new Claim(User.UseridClaim, user.ContactId.ToString()));
-                }                    
-                if (!string.IsNullOrEmpty(user.UserType))
-                {
-                    claims.Add(new Claim(User.UserTypeClaim, user.UserType));
-                }
-
-                var permissions = user.GetActivePermissions().Select(p => new Claim(User.PermissionClaim, p.Code)).ToList();
-                if (permissions.Any())
-                {
-                    claims.AddRange(permissions);
-                }
-                    
-
-                var roles = user.GetActiveRoles().Select(r => new Claim(ClaimTypes.Role, r.Name)).ToList();
-                if (roles.Any())
-                {
-                    claims.AddRange(roles);
-                }
-                    
-
-            }
-
-            return claims;
-        }
-
-        private static List<Permission> GetActivePermissions(this User user)
-        {
-            List<Permission> result = null;
-
-            var activeRoles = user.GetActiveRoles();
-
-            if (activeRoles != null)
-            {                
-                IEnumerable<RolePermission> rolePermissions = activeRoles
-                        .Where (x => x != null && x.RolePermissions != null)
-                        .SelectMany(x => x.RolePermissions);
-
-                result = rolePermissions.Select(x => x.Permission).Distinct().ToList();
-            }
-
-            return result;            
-        }
-
-        private static List<Role> GetActiveRoles(this User user)
-        {
-            List<Role> roles = new List<Role>();
-            
-            if (user.UserRoles == null)
-                return roles;
-
-            roles = user.UserRoles.Where(
-                x => x.Role != null
-                && x.EffectiveDate <= DateTime.UtcNow 
-                && (x.ExpiryDate == null || x.ExpiryDate > DateTime.UtcNow))
-                .Select(x => x.Role).ToList();
-
-            return roles;
-        }
-
-    }
-}
diff --git a/embc-app/Controllers/LoadTestController.cs b/embc-app/Controllers/LoadTestController.cs
deleted file mode 100644
index 3552035..0000000
--- a/embc-app/Controllers/LoadTestController.cs
+++ /dev/null
@@ -1,47 +0,0 @@
-ï»¿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using Gov.Jag.Embc.Public.Authentication;
-using Gov.Jag.Embc.Public.Models;
-using Microsoft.AspNetCore.Authorization;
-using Microsoft.AspNetCore.Hosting;
-using Microsoft.AspNetCore.Http;
-using Microsoft.AspNetCore.Mvc;
-using Microsoft.Extensions.Caching.Distributed;
-using Microsoft.Extensions.Caching.Redis;
-using Microsoft.Extensions.Configuration;
-
-namespace Gov.Jag.Embc.Public.Controllers
-{
-    [Route("websurge-allow.txt")]
-    public class LoadTestController : Controller
-    {
-        private readonly IConfiguration Configuration;
-        private readonly IHostingEnvironment _env;
-        private readonly SiteMinderAuthOptions _options = new SiteMinderAuthOptions();
-
-        public LoadTestController( IConfiguration configuration, IHostingEnvironment env)
-        {
-            Configuration = configuration;
-            _env = env;
-        }
-
-        [HttpGet]
-        [AllowAnonymous]
-        public ActionResult LoadTest(string path)
-        {
-            // check to see if we have a local path.  (do not allow a redirect to another website)
-            if (!_env.IsProduction())
-            {
-                return Ok();                
-            }
-            else
-            {
-                return NotFound();
-            }
-        }
-    
-	}
-}
diff --git a/embc-app/Controllers/OrganizationsController.cs b/embc-app/Controllers/OrganizationsController.cs
index ff32b42..ce5451b 100644
--- a/embc-app/Controllers/OrganizationsController.cs
+++ b/embc-app/Controllers/OrganizationsController.cs
@@ -1,4 +1,3 @@
-using Gov.Jag.Embc.Interfaces;
 using Gov.Jag.Embc.Public.DataInterfaces;
 using Gov.Jag.Embc.Public.Utils;
 using Gov.Jag.Embc.Public.ViewModels;
@@ -13,10 +12,9 @@ namespace Gov.Jag.Embc.Public.Controllers
 {
     [Route("api/[controller]")]
     [Authorize]
-    //[Authorize(Policy = "Business-User")]
     public class OrganizationsController : Controller
     {
-        private readonly BCeIDBusinessQuery _bceid;
+        //private readonly BCeIDBusinessQuery _bceid;
 
         //private readonly SharePointFileManager _sharePointFileManager;
         private readonly IHttpContextAccessor httpContextAccessor;
diff --git a/embc-app/Controllers/SystemusersController.cs b/embc-app/Controllers/SystemusersController.cs
deleted file mode 100644
index 1ed477a..0000000
--- a/embc-app/Controllers/SystemusersController.cs
+++ /dev/null
@@ -1,48 +0,0 @@
-using Microsoft.AspNetCore.Hosting;
-using Microsoft.AspNetCore.Http;
-using Microsoft.AspNetCore.Mvc;
-using Microsoft.Extensions.Configuration;
-using Microsoft.Extensions.Logging;
-using System.Threading.Tasks;
-
-namespace Gov.Jag.Embc.Public.Controllers
-{
-    [Route("api/[controller]")]
-    public class SystemusersController : Controller
-    {
-        private readonly IConfiguration Configuration;
-        private readonly IHttpContextAccessor _httpContextAccessor;
-        private readonly ILogger _logger;
-        private readonly IHostingEnvironment _env;
-
-        public SystemusersController(IConfiguration configuration, IHttpContextAccessor httpContextAccessor, ILoggerFactory loggerFactory, IHostingEnvironment env)
-        {
-            Configuration = configuration;
-            _httpContextAccessor = httpContextAccessor;
-            _logger = loggerFactory.CreateLogger(typeof(SystemusersController));
-            this._env = env;
-        }
-
-        /// <summary>
-        ///
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        [HttpGet("{id}")]
-        public IActionResult Get(string id)
-        {
-            return Json(null);
-        }
-
-        /// <summary>
-        ///
-        /// </summary>
-        /// <param name="viewModel"></param>
-        /// <returns></returns>
-        [HttpPost()]
-        public async Task<IActionResult> Create([FromBody] ViewModels.Person item)
-        {
-            return Json(null);
-        }
-    }
-}
diff --git a/embc-app/DataInterfaces/CommunityExtensions.cs b/embc-app/DataInterfaces/CommunityExtensions.cs
deleted file mode 100644
index b771e61..0000000
--- a/embc-app/DataInterfaces/CommunityExtensions.cs
+++ /dev/null
@@ -1,120 +0,0 @@
-using Gov.Jag.Embc.Public.Models.Db;
-using Newtonsoft.Json;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-
-namespace Gov.Jag.Embc.Public.DataInterfaces
-{
-    public static class CommunityExtensions
-    {
-        public static void AddCommunity(this EmbcDbContext context, Community Community)
-        {
-            // create a new Community.
-            context.Communities.Add(Community);
-            context.SaveChanges();
-        }
-
-        public static void UpdateCommunity(this EmbcDbContext context, Community Community)
-        {
-            var community = context.Communities.FirstOrDefault(x => x.Id == Community.Id);
-            community.Name = Community.Name;
-            community.Active = Community.Active;
-            context.Communities.Update(community);
-            context.SaveChanges();
-        }
-
-        /// <summary>
-        /// Returns a specific Community
-        /// </summary>
-        /// <param name="name">The name of the Community</param>
-        /// <returns>The Community, or null if it does not exist.</returns>
-        public static Community GetCommunityByName(this EmbcDbContext context, string name)
-        {
-            Community Community = context.Communities.FirstOrDefault(x => x.Name == name);
-            return Community;
-        }
-
-        /// <summary>
-        /// Create Communities from a (json) file
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="CommunityJsonPath"></param>
-        public static void AddInitialCommunitiesFromFile(this EmbcDbContext context, string CommunityJsonPath)
-        {
-            if (!string.IsNullOrEmpty(CommunityJsonPath) && File.Exists(CommunityJsonPath))
-            {
-                string CommunityJson = File.ReadAllText(CommunityJsonPath);
-                context.AddInitialCommunities(CommunityJson);
-            }
-        }
-
-        private static void AddInitialCommunities(this EmbcDbContext context, string CommunityJson)
-        {
-            List<Community> Communities = JsonConvert.DeserializeObject<List<Community>>(CommunityJson);
-
-            if (Communities != null)
-            {
-                context.AddInitialCommunities(Communities);
-            }
-        }
-
-        private static void AddInitialCommunities(this EmbcDbContext context, List<Community> Communities)
-        {
-            Communities.ForEach(context.AddInitialCommunity);
-        }
-
-        /// <summary>
-        /// Adds a Community to the system, only if it does not exist.
-        /// </summary>
-        private static void AddInitialCommunity(this EmbcDbContext context, Community initialCommunity)
-        {
-            Community Community = context.GetCommunityByName(initialCommunity.Name);
-            if (Community != null)
-            {
-                return;
-            }
-
-            // get the region.
-
-            Region region = null;
-
-            if (initialCommunity.Region != null)
-            {
-                region = context.GetRegionByName(initialCommunity.Region.Name);
-            }
-
-            Community = new Community
-            ()
-            {
-                //Id = initialCommunity.Id,
-                Name = initialCommunity.Name,
-                Active = true,
-                Region = region
-            };
-
-            context.AddCommunity(Community);
-        }
-
-        /// <summary>
-        /// Update Community
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="CommunityInfo"></param>
-        public static void UpdateSeedCommunityInfo(this EmbcDbContext context, Community CommunityInfo)
-        {
-            Community Community = context.GetCommunityByName(CommunityInfo.Name);
-            if (Community == null)
-            {
-                context.AddCommunity(CommunityInfo);
-            }
-            else
-            {
-                Community.Name = CommunityInfo.Name;
-                Community.Active = CommunityInfo.Active;
-                Community.Region = CommunityInfo.Region;
-                context.UpdateCommunity(Community);
-            }
-        }
-    }
-}
diff --git a/embc-app/DataInterfaces/CountryExtensions.cs b/embc-app/DataInterfaces/CountryExtensions.cs
deleted file mode 100644
index 550ab22..0000000
--- a/embc-app/DataInterfaces/CountryExtensions.cs
+++ /dev/null
@@ -1,109 +0,0 @@
-using Gov.Jag.Embc.Public.Models.Db;
-using Newtonsoft.Json;
-using System;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-
-namespace Gov.Jag.Embc.Public.DataInterfaces
-{
-    public static class CountryExtensions
-    {
-        public static void AddCountry(this EmbcDbContext context, Country newCountry)
-        {
-            // create a new Country.
-            context.Countries.Add(newCountry);
-            context.SaveChanges();
-        }
-
-        public static void UpdateCountry(this EmbcDbContext context, Country updatedCountry)
-        {
-            var country = context.Countries.FirstOrDefault(x => x.CountryCode.Equals(updatedCountry.CountryCode, StringComparison.OrdinalIgnoreCase));
-            country.Name = updatedCountry.Name;
-            context.Countries.Update(country);
-            context.SaveChanges();
-        }
-
-        /// <summary>
-        /// Returns a specific Country
-        /// </summary>
-        /// <param name="name">The name of the Country</param>
-        /// <returns>The Country, or null if it does not exist.</returns>
-        public static Country GetCountryByName(this EmbcDbContext context, string name)
-        {
-            var country = context.Countries.FirstOrDefault(x => x.Name == name);
-            return country;
-        }
-
-        /// <summary>
-        /// Create Countries from a (json) file
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="countryJsonPath"></param>
-        public static void AddInitialCountriesFromFile(this EmbcDbContext context, string countryJsonPath)
-        {
-            if (!string.IsNullOrEmpty(countryJsonPath) && File.Exists(countryJsonPath))
-            {
-                string countryJson = File.ReadAllText(countryJsonPath);
-                context.AddInitialCountries(countryJson);
-            }
-        }
-
-        private static void AddInitialCountries(this EmbcDbContext context, string countryJson)
-        {
-            var countries = JsonConvert.DeserializeObject<List<Country>>(countryJson);
-
-            if (countries != null)
-            {
-                context.AddInitialCountries(countries);
-            }
-        }
-
-        private static void AddInitialCountries(this EmbcDbContext context, List<Country> countries)
-        {
-            countries.ForEach(context.AddInitialCountry);
-        }
-
-        /// <summary>
-        /// Adds a Country to the system, only if it does not exist.
-        /// </summary>
-        private static void AddInitialCountry(this EmbcDbContext context, Country initialCountry)
-        {
-            var country = context.GetCountryByName(initialCountry.Name);
-            if (country != null)
-            {
-                return;
-            }
-
-            country = new Country
-            ()
-            {
-                CountryCode = initialCountry.CountryCode,
-                Name = initialCountry.Name,
-                Active = true
-            };
-
-            context.AddCountry(country);
-        }
-
-        /// <summary>
-        /// Update Country
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="updatedCountry"></param>
-        public static void UpdateSeedCountryInfo(this EmbcDbContext context, Country updatedCountry)
-        {
-            var country = context.GetCountryByName(updatedCountry.Name);
-            if (country == null)
-            {
-                context.AddCountry(updatedCountry);
-            }
-            else
-            {
-                country.Name = updatedCountry.Name;
-                country.Active = updatedCountry.Active;
-                context.UpdateCountry(country);
-            }
-        }
-    }
-}
diff --git a/embc-app/DataInterfaces/DataInterface.Organization.cs b/embc-app/DataInterfaces/DataInterface.Organization.cs
index 2aa588c..f1cfe55 100644
--- a/embc-app/DataInterfaces/DataInterface.Organization.cs
+++ b/embc-app/DataInterfaces/DataInterface.Organization.cs
@@ -17,10 +17,9 @@ namespace Gov.Jag.Embc.Public.DataInterfaces
 
         public async Task<IPagedResults<Organization>> GetOrganizationsAsync(SearchQueryParameters searchQuery)
         {
-            Guid searchEntityId;
             Guid? communityId = null;
             string regionName = null;
-            if(searchQuery.HasQuery() && Guid.TryParse(searchQuery.Query, out searchEntityId))
+            if (searchQuery.HasQuery() && Guid.TryParse(searchQuery.Query, out Guid searchEntityId))
             {
                 communityId = searchEntityId;
             }
@@ -40,9 +39,9 @@ namespace Gov.Jag.Embc.Public.DataInterfaces
             return new PaginatedList<Organization>(items.Select(i => i.org.ToViewModel(i.pc)), searchQuery.Offset, searchQuery.Limit);
         }
 
-        public Organization GetOrganizationBCeIDGuid(string guid)
+        public async Task<Organization> GetOrganizationByBCeIDGuidAsync(string guid)
         {
-            var org = Organizations.FirstOrDefault(x => x.BCeIDBusinessGuid == guid);
+            var org = await Organizations.FirstOrDefaultAsync(x => x.BCeIDBusinessGuid == guid);
             if (org == null) return null;
             return org.ToViewModel(GetPrimaryContactForOrganization(org.Id).GetAwaiter().GetResult());
         }
diff --git a/embc-app/DataInterfaces/FamilyRelationshipTypeExtensions.cs b/embc-app/DataInterfaces/FamilyRelationshipTypeExtensions.cs
deleted file mode 100644
index 90f22aa..0000000
--- a/embc-app/DataInterfaces/FamilyRelationshipTypeExtensions.cs
+++ /dev/null
@@ -1,111 +0,0 @@
-using Gov.Jag.Embc.Public.Models.Db;
-using Newtonsoft.Json;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-
-namespace Gov.Jag.Embc.Public.DataInterfaces
-{
-    public static class FamilyRelationshipTypeExtensions
-    {
-        public static void PatchValues(this FamilyRelationshipType self, FamilyRelationshipType other)
-        {
-            self.Code = other.Code;
-            self.Description = other.Description;
-            self.Active = other.Active;
-        }
-
-        public static void AddFamilyRelationshipType(this EmbcDbContext context, FamilyRelationshipType entity)
-        {
-            // create a new FamilyRelationshipType.
-            context.FamilyRelationshipTypes.Add(entity);
-            context.SaveChanges();
-        }
-
-        public static void UpdateFamilyRelationshipType(this EmbcDbContext context, FamilyRelationshipType value)
-        {
-            FamilyRelationshipType entityFound = context.GetFamilyRelationshipTypeByCode(value.Code);
-            if (entityFound != null)
-            {
-                entityFound.PatchValues(value);
-                context.FamilyRelationshipTypes.Update(entityFound);
-                context.SaveChanges();
-            }
-        }
-
-        /// <summary>
-        /// Returns a specific FamilyRelationshipType
-        /// </summary>
-        /// <param name="code">The name of the FamilyRelationshipType</param>
-        /// <returns>The FamilyRelationshipType, or null if it does not exist.</returns>
-        public static FamilyRelationshipType GetFamilyRelationshipTypeByCode(this EmbcDbContext context, string code)
-        {
-            FamilyRelationshipType entity = context.FamilyRelationshipTypes.FirstOrDefault(x => x.Code == code);
-            return entity;
-        }
-
-        /// <summary>
-        /// Create FamilyRelationshipTypes from a (json) file
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="jsonFilePath"></param>
-        public static void AddInitialFamilyRelationshipTypesFromFile(this EmbcDbContext context, string jsonFilePath)
-        {
-            if (!string.IsNullOrEmpty(jsonFilePath) && File.Exists(jsonFilePath))
-            {
-                string json = File.ReadAllText(jsonFilePath);
-                context.AddInitialFamilyRelationshipTypes(json);
-            }
-        }
-
-        private static void AddInitialFamilyRelationshipTypes(this EmbcDbContext context, string json)
-        {
-            List<FamilyRelationshipType> values = JsonConvert.DeserializeObject<List<FamilyRelationshipType>>(json);
-
-            if (values != null)
-            {
-                context.AddInitialFamilyRelationshipTypes(values);
-            }
-        }
-
-        private static void AddInitialFamilyRelationshipTypes(this EmbcDbContext context, List<FamilyRelationshipType> values)
-        {
-            values.ForEach(context.AddInitialFamilyRelationshipType);
-        }
-
-        /// <summary>
-        /// Adds a FamilyRelationshipType to the system, only if it does not exist.
-        /// </summary>
-        private static void AddInitialFamilyRelationshipType(this EmbcDbContext context, FamilyRelationshipType value)
-        {
-            FamilyRelationshipType entity = context.GetFamilyRelationshipTypeByCode(value.Code);
-            if (entity != null)
-            {
-                return;
-            }
-
-            entity = new FamilyRelationshipType();
-            entity.PatchValues(value);
-            context.AddFamilyRelationshipType(entity);
-        }
-
-        /// <summary>
-        /// Update FamilyRelationshipType
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="value"></param>
-        public static void UpdateSeedFamilyRelationshipTypeInfo(this EmbcDbContext context, FamilyRelationshipType value)
-        {
-            FamilyRelationshipType foundEntity = context.GetFamilyRelationshipTypeByCode(value.Code);
-            if (foundEntity == null)
-            {
-                context.AddFamilyRelationshipType(value);
-            }
-            else
-            {
-                foundEntity.PatchValues(value);
-                context.UpdateFamilyRelationshipType(foundEntity);
-            }
-        }
-    }
-}
diff --git a/embc-app/DataInterfaces/IDataInterface.cs b/embc-app/DataInterfaces/IDataInterface.cs
index 15a1f51..b578baf 100644
--- a/embc-app/DataInterfaces/IDataInterface.cs
+++ b/embc-app/DataInterfaces/IDataInterface.cs
@@ -54,7 +54,7 @@ namespace Gov.Jag.Embc.Public.DataInterfaces
 
         Task<IPagedResults<Organization>> GetOrganizationsAsync(SearchQueryParameters searchQuery);
 
-        Organization GetOrganizationBCeIDGuid(string guid);
+        Task<Organization> GetOrganizationByBCeIDGuidAsync(string guid);
 
         Task<string> CreateOrganizationAsync(Organization item);
 
diff --git a/embc-app/DataInterfaces/IncidentTaskExtensions.cs b/embc-app/DataInterfaces/IncidentTaskExtensions.cs
deleted file mode 100644
index 0513e1f..0000000
--- a/embc-app/DataInterfaces/IncidentTaskExtensions.cs
+++ /dev/null
@@ -1,96 +0,0 @@
-using Gov.Jag.Embc.Public.Models.Db;
-using Newtonsoft.Json;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-
-namespace Gov.Jag.Embc.Public.DataInterfaces
-{
-    public static class IncidentTaskExtensions
-    {
-        public static void AddIncidentTask(this EmbcDbContext context, IncidentTask IncidentTask)
-        {
-            // create a new IncidentTask.
-            context.IncidentTasks.Add(IncidentTask);
-            context.SaveChanges();
-        }
-
-        /// <summary>
-        /// Returns a specific IncidentTask
-        /// </summary>
-        /// <param name="taskNumber">The task number of the IncidentTask</param>
-        /// <returns>The IncidentTask, or null if it does not exist.</returns>
-        public static IncidentTask GetIncidentTaskByTaskNumber(this EmbcDbContext context, string taskNumber)
-        {
-            var incidentTask = context.IncidentTasks.FirstOrDefault(x => x.TaskNumber == taskNumber);
-            return incidentTask;
-        }
-
-        /// <summary>
-        /// Create IncidentTasks from a (json) file
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="IncidentTaskJsonPath"></param>
-        public static void AddInitialIncidentTasksFromFile(this EmbcDbContext context, string IncidentTaskJsonPath)
-        {
-            if (!string.IsNullOrEmpty(IncidentTaskJsonPath) && File.Exists(IncidentTaskJsonPath))
-            {
-                string IncidentTaskJson = File.ReadAllText(IncidentTaskJsonPath);
-                context.AddInitialIncidentTasks(IncidentTaskJson);
-            }
-        }
-
-        private static void AddInitialIncidentTasks(this EmbcDbContext context, string IncidentTaskJson)
-        {
-            List<IncidentTask> IncidentTasks = JsonConvert.DeserializeObject<List<IncidentTask>>(IncidentTaskJson);
-
-            if (IncidentTasks != null)
-            {
-                context.AddInitialIncidentTasks(IncidentTasks);
-            }
-        }
-
-        private static void AddInitialIncidentTasks(this EmbcDbContext context, List<IncidentTask> IncidentTasks)
-        {
-            IncidentTasks.ForEach(context.AddInitialIncidentTask);
-        }
-
-        /// <summary>
-        /// Adds a IncidentTask to the system, only if it does not exist.
-        /// </summary>
-        private static void AddInitialIncidentTask(this EmbcDbContext context, IncidentTask initialIncidentTask)
-        {
-            IncidentTask IncidentTask = context.GetIncidentTaskByTaskNumber(initialIncidentTask.TaskNumber);
-            if (IncidentTask != null)
-            {
-                return;
-            }
-
-            Region region = null;
-
-            if (initialIncidentTask.Region != null)
-            {
-                region = context.GetRegionByName(initialIncidentTask.Region.Name);
-            }
-
-            Community community = null;
-
-            if (initialIncidentTask.Community != null)
-            {
-                community = context.GetCommunityByName(initialIncidentTask.Community.Name);
-            }
-
-            IncidentTask = new IncidentTask
-            ()
-            {
-                Details = initialIncidentTask.Details,
-                Active = true,
-                Region = region,
-                Community = community,
-                TaskNumber = initialIncidentTask.TaskNumber
-            };
-
-            context.AddIncidentTask(IncidentTask);
-        }
-    }
-}
diff --git a/embc-app/DataInterfaces/OrganizationExtensions.cs b/embc-app/DataInterfaces/OrganizationExtensions.cs
deleted file mode 100644
index 6331aca..0000000
--- a/embc-app/DataInterfaces/OrganizationExtensions.cs
+++ /dev/null
@@ -1,77 +0,0 @@
-using Gov.Jag.Embc.Public.Models.Db;
-using Newtonsoft.Json;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-
-namespace Gov.Jag.Embc.Public.DataInterfaces
-{
-    public static class OrganizationExtensions
-    {
-        public static void AddOrganization(this EmbcDbContext context, Organization organization)
-        {
-            context.Organizations.Add(organization);
-            context.SaveChanges();
-        }
-
-        public static Organization GetOrganizationByBceidAccountNumber(this EmbcDbContext context, string bceidAccountNumber)
-        {
-            var item = context.Organizations.FirstOrDefault(x => x.BCeIDBusinessGuid == bceidAccountNumber);
-            return item;
-        }
-
-        public static void AddInitialOrganizationsFromFile(this EmbcDbContext context, string filePath)
-        {
-            if (!string.IsNullOrEmpty(filePath) && File.Exists(filePath))
-            {
-                string json = File.ReadAllText(filePath);
-                context.AddOrganizations(json);
-            }
-        }
-
-        private static void AddOrganizations(this EmbcDbContext context, string json)
-        {
-            var items = JsonConvert.DeserializeObject<List<Organization>>(json);
-
-            if (items != null)
-            {
-                context.AddInitialOrganizations(items);
-            }
-        }
-
-        private static void AddInitialOrganizations(this EmbcDbContext context, List<Organization> items)
-        {
-            items.ForEach(context.AddInitialOrganization);
-        }
-
-        private static void AddInitialOrganization(this EmbcDbContext context, Organization item)
-        {
-            if (context.GetOrganizationByBceidAccountNumber(item.BCeIDBusinessGuid) != null) return;
-
-            Region region = null;
-
-            if (item.Region != null)
-            {
-                region = context.GetRegionByName(item.Region.Name);
-            }
-
-            Community community = null;
-
-            if (item.Community != null)
-            {
-                community = context.GetCommunityByName(item.Community.Name);
-            }
-
-            item = new Organization
-            {
-                BCeIDBusinessGuid = item.BCeIDBusinessGuid,
-                Active = true,
-                RegionName = region.Name,
-                CommunityId = community?.Id,
-                Name = item.Name
-            };
-
-            context.AddOrganization(item);
-        }
-    }
-}
diff --git a/embc-app/DataInterfaces/RegionExtensions.cs b/embc-app/DataInterfaces/RegionExtensions.cs
deleted file mode 100644
index 9ddc8f0..0000000
--- a/embc-app/DataInterfaces/RegionExtensions.cs
+++ /dev/null
@@ -1,108 +0,0 @@
-using Gov.Jag.Embc.Public.Models.Db;
-using Newtonsoft.Json;
-using System;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-
-namespace Gov.Jag.Embc.Public.DataInterfaces
-{
-    public static class RegionExtensions
-    {
-        public static void AddRegion(this EmbcDbContext context, Region newRegion)
-        {
-            // create a new Region.
-            context.Regions.Add(newRegion);
-            context.SaveChanges();
-        }
-
-        public static void UpdateRegion(this EmbcDbContext context, Region udpatedRegion)
-        {
-            var region = context.Regions.FirstOrDefault<Region>(x => x.Name == udpatedRegion.Name);
-            region.Active = udpatedRegion.Active;
-            context.Regions.Update(region);
-            context.SaveChanges();
-        }
-
-        /// <summary>
-        /// Returns a specific Region
-        /// </summary>
-        /// <param name="name">The name of the Region</param>
-        /// <returns>The Region, or null if it does not exist.</returns>
-        public static Region GetRegionByName(this EmbcDbContext context, string name)
-        {
-            var region = context.Regions.FirstOrDefault(x => x.Name == name);
-            return region;
-        }
-
-        /// <summary>
-        /// Create Regions from a (json) file
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="regionJsonPath"></param>
-        public static void AddInitialRegionsFromFile(this EmbcDbContext context, string regionJsonPath)
-        {
-            if (!string.IsNullOrEmpty(regionJsonPath) && File.Exists(regionJsonPath))
-            {
-                var regionJson = File.ReadAllText(regionJsonPath);
-                context.AddInitialRegions(regionJson);
-            }
-        }
-
-        private static void AddInitialRegions(this EmbcDbContext context, string regionJson)
-        {
-            var regions = JsonConvert.DeserializeObject<List<Region>>(regionJson);
-
-            if (regions != null)
-            {
-                context.AddInitialRegions(regions);
-            }
-        }
-
-        private static void AddInitialRegions(this EmbcDbContext context, List<Region> regions)
-        {
-            regions.ForEach(context.AddInitialRegion);
-        }
-
-        /// <summary>
-        /// Adds a Region to the system, only if it does not exist.
-        /// </summary>
-        private static void AddInitialRegion(this EmbcDbContext context, Region initialRegion)
-        {
-            var region = context.GetRegionByName(initialRegion.Name);
-            if (region != null)
-            {
-                return;
-            }
-
-            region = new Region
-            ()
-            {
-                Name = initialRegion.Name,
-                Active = true
-            };
-
-            context.AddRegion(region);
-        }
-
-        /// <summary>
-        /// Update region
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="regionInfo"></param>
-        public static void UpdateSeedRegionInfo(this EmbcDbContext context, Region regionInfo)
-        {
-            var region = context.GetRegionByName(regionInfo.Name);
-            if (region == null)
-            {
-                context.AddRegion(regionInfo);
-            }
-            else
-            {
-                region.Name = regionInfo.Name;
-                region.Active = regionInfo.Active;
-                context.UpdateRegion(region);
-            }
-        }
-    }
-}
diff --git a/embc-app/DataInterfaces/UserExtensions.cs b/embc-app/DataInterfaces/UserExtensions.cs
deleted file mode 100644
index 3b7fce7..0000000
--- a/embc-app/DataInterfaces/UserExtensions.cs
+++ /dev/null
@@ -1,147 +0,0 @@
-using Gov.Jag.Embc.Public.Models;
-using Microsoft.AspNetCore.Http;
-using Microsoft.Extensions.Logging;
-using System;
-using System.Threading.Tasks;
-
-namespace Gov.Jag.Embc.Public.DataInterfaces
-{
-    public static class UserExtensions
-    {
-        /// <summary>
-        /// Load User from database using their userId and guid
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="siteminderGuid"></param>
-        /// <param name="guid"></param>
-        /// <returns></returns>
-        public static async Task<User> LoadUser(this IDataInterface _dataInterface, string siteminderGuid, IHeaderDictionary Headers, ILogger _logger, string guid = null)
-        {
-            User user = null;
-            ViewModels.Volunteer contact = null;
-            Guid userGuid;
-
-            if (!string.IsNullOrEmpty(guid))
-            {
-                user = await _dataInterface.GetUserByGuid(guid);
-            }
-
-            if (user == null)
-            {
-                _logger.LogInformation(">>>> LoadUser for BCEID.");
-                user = _dataInterface.GetUserByExternalId(siteminderGuid);
-                if (user != null)
-                {
-                    _logger.LogInformation(">>>> LoadUser for BCEID: user != null");
-
-                    // if you wish to update the contact with Siteminder headers, do it here.
-                }
-            }
-
-            if (user == null)
-                return null;
-
-            if (guid == null)
-                return user;
-
-            if (!user.ContactId.ToString().Equals(guid, StringComparison.OrdinalIgnoreCase))
-            {
-                // invalid account - guid doesn't match user credential
-                return null;
-            }
-
-            return user;
-        }
-
-        /// <summary>
-        /// Convert a service card ID string into a format that is useful (and fits into Dynamics)
-        /// </summary>
-        /// <param name="raw"></param>
-        /// <returns></returns>
-        public static string GetServiceCardID(string raw)
-        {
-            string result = "";
-            if (!string.IsNullOrEmpty(raw))
-            {
-                var tokens = raw.Split('|');
-                if (tokens.Length > 0)
-                {
-                    result = tokens[0];
-                }
-
-                if (!string.IsNullOrEmpty(result))
-                {
-                    tokens = result.Split(':');
-                    result = tokens[tokens.Length - 1];
-                }
-            }
-
-            return result;
-        }
-
-        /// <summary>
-        /// Returns a User based on the guid
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="guid"></param>
-        /// <returns></returns>
-        public static async Task<User> GetUserByGuid(this IDataInterface _dataInterface, string guid)
-        {
-            Guid id = new Guid(guid);
-            User user = null;
-            var contact = await _dataInterface.GetVolunteerByIdAsync(guid) as ViewModels.Volunteer;
-            if (contact != null)
-            {
-                user = new User();
-                user.FromVolunteer(contact);
-            }
-
-            return user;
-        }
-
-        /// <summary>
-        /// Returns a User based on the guid
-        /// </summary>
-        /// <param name="context"></param>
-        /// <param name="guid"></param>
-        /// <returns></returns>
-        public static User GetUserByExternalId(this IDataInterface _dataInterface, string guid)
-        {
-            User user = null;
-            var contact = _dataInterface.GetVolunteerByExternalId(guid);
-            if (contact != null)
-            {
-                user = new User();
-                user.FromVolunteer(contact);
-            }
-
-            return user;
-        }
-
-        /// <summary>
-        /// Copy values from a Dynamics legal entity to another one
-        /// </summary>
-        /// <param name="to"></param>
-        /// <param name="from"></param>
-        public static void FromVolunteer(this User to, ViewModels.Volunteer from)
-        {
-            if (from.Id != null)
-            {
-                to.ContactId = Guid.Parse(from.Id);
-            }
-
-            if (from.Organization != null && from.Organization.Id != null)
-            {
-                to.AccountId = Guid.Parse(from.Organization.Id);
-            }
-
-            to.GivenName = from.FirstName;
-            to.Surname = from.LastName;
-            to.SmUserId = from.BceidAccountNumber;
-            to.SiteMinderGuid = from.Externaluseridentifier;
-            to.Email = from.Email;
-            to.Active = true;
-            to.IsAdministrator = from.IsAdministrator;
-        }
-    }
-}
diff --git a/embc-app/DataInterfaces/VolunteerExtensions.cs b/embc-app/DataInterfaces/VolunteerExtensions.cs
deleted file mode 100644
index 6df4a4b..0000000
--- a/embc-app/DataInterfaces/VolunteerExtensions.cs
+++ /dev/null
@@ -1,75 +0,0 @@
-using Gov.Jag.Embc.Public.Models.Db;
-using Newtonsoft.Json;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-
-namespace Gov.Jag.Embc.Public.DataInterfaces
-{
-    public static class VolunteerExtensions
-    {
-        public static void AddVolunteer(this EmbcDbContext context, Volunteer item)
-        {
-            context.People.Add(item);
-            context.SaveChanges();
-        }
-
-        public static Volunteer GetVolunteerByBceidAccountNumber(this EmbcDbContext context, string bceidAccountNumber)
-        {
-            var item = context.People.Where(x => x is Volunteer).Cast<Volunteer>().FirstOrDefault(x => x.BceidAccountNumber == bceidAccountNumber);
-            return item;
-        }
-
-        public static void AddInitialVolunteersFromFile(this EmbcDbContext context, string filePath)
-        {
-            if (!string.IsNullOrEmpty(filePath) && File.Exists(filePath))
-            {
-                string json = File.ReadAllText(filePath);
-                context.AddVolunteers(json);
-            }
-        }
-
-        private static void AddVolunteers(this EmbcDbContext context, string json)
-        {
-            List<Volunteer> items = JsonConvert.DeserializeObject<List<Volunteer>>(json);
-
-            if (items != null)
-            {
-                context.AddInitialVolunteers(items);
-            }
-        }
-
-        private static void AddInitialVolunteers(this EmbcDbContext context, List<Volunteer> items)
-        {
-            items.ForEach(context.AddInitialVolunteer);
-        }
-
-        private static void AddInitialVolunteer(this EmbcDbContext context, Volunteer item)
-        {
-            if (context.GetVolunteerByBceidAccountNumber(item.BceidAccountNumber) != null) return;
-
-            Organization org = null;
-
-            if (item.Organization != null)
-            {
-                org = context.GetOrganizationByBceidAccountNumber(item.Organization.BCeIDBusinessGuid);
-            }
-
-            item = new Volunteer
-            {
-                BceidAccountNumber = item.BceidAccountNumber,
-                Active = true,
-                OrganizationId = org?.Id,
-                Externaluseridentifier = item.Externaluseridentifier,
-                FirstName = item.FirstName,
-                LastName = item.LastName,
-                IsAdministrator = item.IsAdministrator,
-                CanAccessRestrictedFiles = item.CanAccessRestrictedFiles,
-                IsPrimaryContact = item.IsPrimaryContact,
-                Email = item.Email
-            };
-
-            context.AddVolunteer(item);
-        }
-    }
-}
diff --git a/embc-app/DynamicsExtensions/Common.cs b/embc-app/DynamicsExtensions/Common.cs
deleted file mode 100644
index a441d00..0000000
--- a/embc-app/DynamicsExtensions/Common.cs
+++ /dev/null
@@ -1,152 +0,0 @@
-ï»¿using System;
-using System.Collections.Generic;
-using System.Xml.Linq;
-
-namespace Gov.Jag.Embc.Interfaces
-{
-    public static class CommonDynamicsExtensions
-    {
-
-        
-
-        /// <summary>
-        /// Convert a Dynamics attribute to boolean
-        /// </summary>
-        /// <param name="attribute"></param>
-        /// <returns></returns>
-        public static Boolean DynamicsAttributeToBoolean(this XAttribute attribute)
-        {
-            Boolean result = false;
-            if (attribute != null)
-            {
-                string value = attribute.Value;
-                if (!string.IsNullOrEmpty(value))
-                {
-                    result = (value.Equals("1") || value.ToLower().Equals("true"));
-                }
-            }
-
-            return result;
-        }
-
-        /// <summary>
-        /// Get the first name from 
-        /// </summary>
-        /// <param name="value"></param>
-        /// <returns></returns>
-        public static string GetFirstName(this string value)
-        {
-            string result = "";
-            if (value != null)
-            {
-                int pos = value.IndexOf(",");
-                if (pos > -1)
-                {
-                    // last name, first
-                    result = value.Substring(pos + 1);
-                }
-                else
-                {
-                    pos = value.IndexOf(" ");
-                    result = value.Substring(0, pos);
-                }
-            }
-            return result;
-        }
-
-        public static string GetLastName(this string value)
-        {
-            string result = "";
-            if (value != null)
-            {
-                int pos = value.IndexOf(",");
-                if (pos > -1)
-                {
-                    // last name, first
-                    result = value.Substring(0, pos);
-                }
-                else
-                {
-                    pos = value.IndexOf(" ");
-                    result = value.Substring(pos + 1);
-                }
-            }
-            return result;
-        }
-
-        public static string DynamicsControlClassidToName(this string value)
-        {
-            string result = "Unknown";
-            // source for mappings:  https://msdn.microsoft.com/en-us/library/gg334472.aspx
-            Dictionary<string, string> classidMap = new Dictionary<string, string>()
-            {
-                { "{F93A31B2-99AC-4084-8EC2-D4027C31369A}","AccessPrivilegeControl" },
-                { "{3F4E2A56-F102-4B4D-AB9C-F1574CA5BFDA}","AccessTeamEntityPicker" },
-                { "{C72511AB-84E5-4FB7-A543-25B4FC01E83E}","ActivitiesContainerControl" },
-                { "{6636847D-B74D-4994-B55A-A6FAF97ECEA2}","ActivitiesWallControl" },
-                { "{F02EF977-2564-4B9A-B2F0-DF083D8A019B}","ArticleContentControl" },
-                { "{00AD73DA-BD4D-49C6-88A8-2F4F4CAD4A20}","ButtonControl" },
-                { "{B0C6723A-8503-4FD7-BB28-C8A06AC933C2}","CheckBoxControl" },
-                { "{DB1284EF-9FFC-4E99-B382-0CC082FE2364}","CompositionLinkControl" },
-                { "{3246F906-1F71-45F7-B11F-D7BE0F9D04C9}","ConnectionControl" },
-                { "{821ACF1A-7E46-4A0C-965D-FE14A57D78C7}","ConnectionRoleObjectTypeListControl" },
-                { "{4168A05C-D857-46AF-8457-5BB47EB04EA1}","CoverPagePicklistControl" },
-                { "{F9A8A302-114E-466A-B582-6771B2AE0D92}","CustomControl" },
-                { "{5B773807-9FB2-42DB-97C3-7A91EFF8ADFF}","DateTimeControl" },
-                { "{C3EFE0C3-0EC6-42BE-8349-CBD9079DFD8E}","DecimalControl" },
-                { "{AA987274-CE4E-4271-A803-66164311A958}","DurationControl" },
-                { "{6896F004-B17A-4202-861E-8B7EA2080E0B}","DynamicPropertyListControl" },
-                { "{ADA2203E-B4CD-49BE-9DDF-234642B43B52}","EmailAddressControl" },
-                { "{6F3FB987-393B-4D2D-859F-9D0F0349B6AD}","EmailBodyControl" },
-                { "{F4C16ECA-CA81-4E39-9448-834B8378721E}","ErrorStatusControl" },
-                { "{0D2C745A-E5A8-4C8F-BA63-C6D3BB604660}","FloatControl" },
-                { "{FD2A7985-3187-444E-908D-6624B21F69C0}","FrameControl" },
-                { "{E7A81278-8635-4D9E-8D4D-59480B391C5B}","GridControl" },
-                { "{5546E6CD-394C-4BEE-94A8-4425E17EF6C6}","HiddenInputControl" },
-                { "{C6D124CA-7EDA-4A60-AEA9-7FB8D318B68F}","IntegerControl" },
-                { "{A62B6FA9-169E-406C-B1AA-EAB828CB6026}","KBViewerControl" },
-                { "{5635c4df-1453-413e-b213-e81b65411150}","LabelControl" },
-                { "{671A9387-CA5A-4D1E-8AB7-06E39DDCF6B5}","LanguagePicker" },
-                { "{DFDF1CDE-837B-4AC9-98CF-AC74361FD89D}","LinkControl" },
-                { "{270BD3DB-D9AF-4782-9025-509E298DEC0A}","LookupControl" },
-                { "{B634828E-C390-444A-AFE6-E07315D9D970}","MailMergeLanguagePicker" },
-                { "{91DC0675-C8B9-4421-B1E0-261CEBF02BAC}","MapLinkControl" },
-                { "{62B0DF79-0464-470F-8AF7-4483CFEA0C7D}","MapsControl" },
-                { "{533B9E00-756B-4312-95A0-DC888637AC78}","MoneyControl" },
-                { "{06375649-C143-495E-A496-C962E5B4488}","NotesControl" },
-                { "{CBFB742C-14E7-4A17-96BB-1A13F7F64AA2}","PartyListControl" },
-                { "{8C10015A-B339-4982-9474-A95FE05631A5}","PhoneNumberControl" },
-                { "{3EF39988-22BB-4F0B-BBBE-64B5A3748AEE}","PicklistControl" },
-                { "{2305E33A-BAD3-4022-9E15-1856CF218333}","PicklistLookupControl" },
-                { "{5D68B988-0661-4DB2-BC3E-17598AD3BE6C}","PicklistStatusControl" },
-                { "{06E9F7AF-1F54-4681-8EEC-1E21A1CEB465}","ProcessControl" },
-                { "{5C5600E0-1D6E-4205-A272-BE80DA87FD42}","QuickFormCollectionControl" },
-                { "{69AF7DCA-2E3B-4EE7-9201-0DA731DD2413}","QuickFormControl" },
-                { "{67FAC785-CD58-4F9F-ABB3-4B7DDC6ED5ED}","RadioControl" },
-                { "{F3015350-44A2-4AA0-97B5-00166532B5E9}","RegardingControl" },
-                { "{163B90A6-EB64-49D2-9DF8-3C84A4F0A0F8}","RelatedInformationControl" },
-                { "{5F986642-5961-4D9F-AB5E-643D71E231E9}","RelationshipRolePicklist" },
-                { "{A28F441B-916C-4865-87FD-0C5D53BD59C9}","ReportControl" },
-                { "{E616A57F-20E0-4534-8662-A101B5DDF4E0}","SearchWidget" },
-                { "{86B9E25E-695E-4FEF-AC69-F05CFA96739C}","SocialInsightControl" },
-                { "{E0DECE4B-6FC8-4A8F-A065-082708572369}","TextAreaControl" },
-                { "{4273EDBD-AC1D-40D3-9FB2-095C621B552D}","TextBoxControl" },
-                { "{1E1FC551-F7A8-43AF-AC34-A8DC35C7B6D4}","TickerControl" },
-                { "{9C5CA0A1-AB4D-4781-BE7E-8DFBE867B87E}","TimerControl" },
-                { "{7C624A0B-F59E-493D-9583-638D34759266}","TimeZonePicklistControl" },
-                { "{71716B6C-711E-476C-8AB8-5D11542BFB47}","UrlControl" },
-                { "{9FDF5F91-88B1-47F4-AD53-C11EFC01A01D}","WebResourceHtmlControl" },
-                { "{587CDF98-C1D5-4BDE-8473-14A0BC7644A7}","WebResourceImageControl" },
-                { "{080677DB-86EC-4544-AC42-F927E74B491F}","WebResourceSilverlightControl" }
-            };
-            if (value != null && classidMap.ContainsKey(value.ToUpper()))
-            {
-                result = classidMap[value.ToUpper()];
-            }
-            return result;
-        }      
-
-        
-
-    }
-}
diff --git a/embc-app/Models.Extensions/Permission.cs b/embc-app/Models.Extensions/Permission.cs
deleted file mode 100644
index 4706f73..0000000
--- a/embc-app/Models.Extensions/Permission.cs
+++ /dev/null
@@ -1,85 +0,0 @@
-ï»¿using System.Collections.Generic;
-
-namespace Gov.Jag.Embc.Public.Models
-{
-    /// <summary>
-    /// Permission Database Model Extension
-    /// </summary>
-    public sealed partial class Permission
-    {
-        /// <summary>
-        /// Login (UI) Permission
-        /// </summary>
-        public const string Login = "Login";
-
-        /// <summary>
-        /// User Management Permission
-        /// </summary>
-        public const string UserManagement = "UserManagement";
-
-        /// <summary>
-        /// Roles and Permissions Permission
-        /// </summary>
-        public const string RolesAndPermissions = "RolesAndPermissions";
-
-        /// <summary>
-        /// Admin Perission
-        /// </summary>
-        public const string Admin = "Admin";
-
-        
-        public const string NewUserRegistration = "NewUserRegistration";
-
-        /// <summary>
-        /// Code Table Management Permission
-        /// </summary>
-        public const string CodeTableManagement = "CodeTableManagement";
-
-        /// <summary>
-        /// District Code Table Management Permission
-        /// </summary>
-        public const string DistrictCodeTableManagement = "DistrictCodeTableManagement";
-
-        /// <summary>
-        /// Business Login Permission
-        /// </summary>
-        public const string BusinessLogin = "BusinessLogin";
-
-        /// <summary>
-        /// All Permissions List
-        /// </summary>
-        public static readonly IEnumerable<Permission> AllPermissions = new List<Permission>
-        {
-            new Permission
-            {
-                Code = NewUserRegistration,
-                Name = "New User Registration",
-                Description = "Only permission given to new users.  Removed when they complete registration."
-            },
-            new Permission
-            {
-                Code = Login,
-                Name = "Login",
-                Description = "Permission to login to the application"
-            },
-            new Permission
-            {
-                Code = RolesAndPermissions,
-                Name = "Roles and Permissions",
-                Description = "Gives the user access to the Roles and Permissions screens"
-            },
-            new Permission
-            {
-                Code = Admin,
-                Name = "Admin",
-                Description = "Allows the user to perform special administrative tasks"
-            },                
-            new Permission
-            {
-                Code = BusinessLogin,
-                Name = "Business Login",
-                Description = "Permission to login to the business or owner facing application"
-            }
-        };
-    }
-}
diff --git a/embc-app/Models.Extensions/Role.cs b/embc-app/Models.Extensions/Role.cs
deleted file mode 100644
index 0f09d82..0000000
--- a/embc-app/Models.Extensions/Role.cs
+++ /dev/null
@@ -1,37 +0,0 @@
-ï»¿using System.Linq;
-
-namespace Gov.Jag.Embc.Public.Models
-{
-    /// <summary>
-    /// Role Database Model Extension
-    /// </summary>
-    public sealed partial class Role
-    {
-        /// <summary>
-        /// Adds a permission to this role instance.
-        /// </summary>
-        /// <param name="permission">The permission to add.</param>
-        public void AddPermission(Permission permission)
-        {
-            var rolePermission = new RolePermission
-            {
-                Permission = permission,
-                Role = this
-            };
-            RolePermissions.Add(rolePermission);
-        }
-
-        /// <summary>
-        /// Removes a permission from this role instance.
-        /// </summary>
-        /// <param name="permission">The permission to remove.</param>
-        public void RemovePermission(Permission permission)
-        {
-            var permissionToRemove = RolePermissions.FirstOrDefault(x => x.Permission.Code == permission.Code);
-            if (permissionToRemove != null)
-            {
-                RolePermissions.Remove(permissionToRemove);
-            }
-        }
-    }
-}
diff --git a/embc-app/Models/CacheKeys.cs b/embc-app/Models/CacheKeys.cs
deleted file mode 100644
index a63a1ca..0000000
--- a/embc-app/Models/CacheKeys.cs
+++ /dev/null
@@ -1,13 +0,0 @@
-ï»¿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Threading.Tasks;
-
-namespace Gov.Jag.Embc.Public.Models
-{
-    public static class CacheKeys
-    {
-        public static string PolicyDocumentPrefix { get { return "_PD_"; } }
-        public static string PolicyDocumentCategoryPrefix { get { return "_PDC_"; } }
-    }
-}
diff --git a/embc-app/Models/Permission.cs b/embc-app/Models/Permission.cs
deleted file mode 100644
index c463ae4..0000000
--- a/embc-app/Models/Permission.cs
+++ /dev/null
@@ -1,200 +0,0 @@
-using System;
-using System.Text;
-using Newtonsoft.Json;
-using System.ComponentModel.DataAnnotations;
-using System.ComponentModel.DataAnnotations.Schema;
-
-namespace Gov.Jag.Embc.Public.Models
-{
-    /// <summary>
-    /// Permission Database Model
-    /// </summary>
-        public sealed partial class Permission : IEquatable<Permission>
-    {
-
-
-        /// <summary>
-        /// Initializes a new instance of the <see cref="Permission" /> class.
-        /// </summary>
-        /// <param name="id">A system-generated unique identifier for a Permission (required).</param>
-        /// <param name="code">The name of the permission referenced in the software of the application. (required).</param>
-        /// <param name="name">The &amp;#39;user friendly&amp;#39; name of the permission exposed to the user selecting the permissions to be included in a Role. (required).</param>
-        /// <param name="description">A description of the purpose of the permission and exposed to the user selecting the permissions to be included in a Role..</param>
-        public Permission(Guid id, string code, string name, string description = null)
-        {   
-            Id = id;
-            Code = code;
-            Name = name;
-            Description = description;
-        }
-
-        public Permission(string code, string name, string description = null)
-        {            
-            Code = code;
-            Name = name;
-            Description = description;
-        }
-
-        public Permission()
-        {            
-        }
-
-        /// <summary>
-        /// A system-generated unique identifier for a Permission
-        /// </summary>
-        /// <value>A system-generated unique identifier for a Permission</value>
-        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
-        public Guid Id { get; set; }
-
-        /// <summary>
-        /// The name of the permission referenced in the software of the application.
-        /// </summary>
-        /// <value>The name of the permission referenced in the software of the application.</value>
-        [MaxLength(50)]        
-        public string Code { get; set; }
-        
-        /// <summary>
-        /// The &#39;user friendly&#39; name of the permission exposed to the user selecting the permissions to be included in a Role.
-        /// </summary>
-        /// <value>The &#39;user friendly&#39; name of the permission exposed to the user selecting the permissions to be included in a Role.</value>
-         [MaxLength(150)]        
-        public string Name { get; set; }
-        
-        /// <summary>
-        /// A description of the purpose of the permission and exposed to the user selecting the permissions to be included in a Role.
-        /// </summary>
-        /// <value>A description of the purpose of the permission and exposed to the user selecting the permissions to be included in a Role.</value>
-        [MaxLength(2048)]        
-        public string Description { get; set; }
-        
-        /// <summary>
-        /// Returns the string presentation of the object
-        /// </summary>
-        /// <returns>String presentation of the object</returns>
-        public override string ToString()
-        {
-            var sb = new StringBuilder();
-
-            sb.Append("class Permission {\n");
-            sb.Append("  Id: ").Append(Id).Append("\n");
-            sb.Append("  Code: ").Append(Code).Append("\n");
-            sb.Append("  Name: ").Append(Name).Append("\n");
-            sb.Append("  Description: ").Append(Description).Append("\n");
-            sb.Append("}\n");
-
-            return sb.ToString();
-        }
-
-        /// <summary>
-        /// Returns the JSON string presentation of the object
-        /// </summary>
-        /// <returns>JSON string presentation of the object</returns>
-        public string ToJson()
-        {
-            return JsonConvert.SerializeObject(this, Formatting.Indented);
-        }
-
-        /// <summary>
-        /// Returns true if objects are equal
-        /// </summary>
-        /// <param name="obj">Object to be compared</param>
-        /// <returns>Boolean</returns>
-        public override bool Equals(object obj)
-        {
-            if (obj is null) { return false; }
-            if (ReferenceEquals(this, obj)) { return true; }
-            return obj.GetType() == GetType() && Equals((Permission)obj);
-        }
-
-        /// <summary>
-        /// Returns true if Permission instances are equal
-        /// </summary>
-        /// <param name="other">Instance of Permission to be compared</param>
-        /// <returns>Boolean</returns>
-        public bool Equals(Permission other)
-        {
-            if (other is null) { return false; }
-            if (ReferenceEquals(this, other)) { return true; }
-
-            return                 
-                (
-                    Id == other.Id ||
-                    Id.Equals(other.Id)
-                ) &&                 
-                (
-                    Code == other.Code ||
-                    Code != null &&
-                    Code.Equals(other.Code)
-                ) &&                 
-                (
-                    Name == other.Name ||
-                    Name != null &&
-                    Name.Equals(other.Name)
-                ) &&                 
-                (
-                    Description == other.Description ||
-                    Description != null &&
-                    Description.Equals(other.Description)
-                );
-        }
-
-        /// <summary>
-        /// Gets the hash code
-        /// </summary>
-        /// <returns>Hash code</returns>
-        public override int GetHashCode()
-        {
-            // credit: http://stackoverflow.com/a/263416/677735
-            unchecked // Overflow is fine, just wrap
-            {
-                int hash = 41;
-
-                // Suitable nullity checks                                   
-                hash = hash * 59 + Id.GetHashCode();
-
-                if (Code != null)
-                {
-                    hash = hash * 59 + Code.GetHashCode();
-                }
-
-                if (Name != null)
-                {
-                    hash = hash * 59 + Name.GetHashCode();
-                }
-
-                if (Description != null)
-                {
-                    hash = hash * 59 + Description.GetHashCode();
-                }                
-                
-                return hash;
-            }
-        }
-
-        #region Operators
-        
-        /// <summary>
-        /// Equals
-        /// </summary>
-        /// <param name="left"></param>
-        /// <param name="right"></param>
-        /// <returns></returns>
-        public static bool operator ==(Permission left, Permission right)
-        {
-            return Equals(left, right);
-        }
-
-        /// <summary>
-        /// Not Equals
-        /// </summary>
-        /// <param name="left"></param>
-        /// <param name="right"></param>
-        /// <returns></returns>
-        public static bool operator !=(Permission left, Permission right)
-        {
-            return !Equals(left, right);
-        }
-
-        #endregion Operators
-    }
-}
diff --git a/embc-app/Models/Role.cs b/embc-app/Models/Role.cs
deleted file mode 100644
index f073470..0000000
--- a/embc-app/Models/Role.cs
+++ /dev/null
@@ -1,209 +0,0 @@
-using System;
-using System.Linq;
-using System.Text;
-using System.Collections.Generic;
-using Newtonsoft.Json;
-using System.ComponentModel.DataAnnotations;
-using System.ComponentModel.DataAnnotations.Schema;
-
-namespace Gov.Jag.Embc.Public.Models
-{
-    /// <summary>
-    /// Role Database Model
-    /// </summary>
-        public sealed partial class Role :  IEquatable<Role>
-    {
-
-        /// <summary>
-        /// Initializes a new instance of the <see cref="Role" /> class.
-        /// </summary>
-        /// <param name="id">A system-generated unique identifier for a Role (required).</param>
-        /// <param name="name">The name of the Role, as established by the user creating the role. (required).</param>
-        /// <param name="description">A description of the role as set by the user creating&amp;#x2F;updating the role. (required).</param>
-        /// <param name="rolePermissions">RolePermissions.</param>
-        /// <param name="userRoles">UserRoles.</param>
-        public Role(Guid id, string name, string description, List<RolePermission> rolePermissions = null, List<UserRole> userRoles = null)
-        {   
-            Id = id;
-            Name = name;
-            Description = description;
-            RolePermissions = rolePermissions;
-            UserRoles = userRoles;
-        }
-
-        public Role()
-        { }
-
-        /// <summary>
-        /// A system-generated unique identifier for a Role
-        /// </summary>
-        /// <value>A system-generated unique identifier for a Role</value>
-        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
-        public Guid Id { get; set; }
-
-        /// <summary>
-        /// The name of the Role, as established by the user creating the role.
-        /// </summary>
-        /// <value>The name of the Role, as established by the user creating the role.</value>
-        [MaxLength(255)]        
-        public string Name { get; set; }
-        
-        /// <summary>
-        /// A description of the role as set by the user creating&#x2F;updating the role.
-        /// </summary>
-        /// <value>A description of the role as set by the user creating&#x2F;updating the role.</value>
-        [MaxLength(2048)]        
-        public string Description { get; set; }
-        
-        /// <summary>
-        /// Gets or Sets RolePermissions
-        /// </summary>
-        public List<RolePermission> RolePermissions { get; set; }
-        
-        /// <summary>
-        /// Gets or Sets UserRoles
-        /// </summary>
-        public List<UserRole> UserRoles { get; set; }
-        
-        /// <summary>
-        /// Returns the string presentation of the object
-        /// </summary>
-        /// <returns>String presentation of the object</returns>
-        public override string ToString()
-        {
-            var sb = new StringBuilder();
-
-            sb.Append("class Role {\n");
-            sb.Append("  Id: ").Append(Id).Append("\n");
-            sb.Append("  Name: ").Append(Name).Append("\n");
-            sb.Append("  Description: ").Append(Description).Append("\n");
-            sb.Append("  RolePermissions: ").Append(RolePermissions).Append("\n");
-            sb.Append("  UserRoles: ").Append(UserRoles).Append("\n");
-            sb.Append("}\n");
-
-            return sb.ToString();
-        }
-
-        /// <summary>
-        /// Returns the JSON string presentation of the object
-        /// </summary>
-        /// <returns>JSON string presentation of the object</returns>
-        public string ToJson()
-        {
-            return JsonConvert.SerializeObject(this, Formatting.Indented);
-        }
-
-        /// <summary>
-        /// Returns true if objects are equal
-        /// </summary>
-        /// <param name="obj">Object to be compared</param>
-        /// <returns>Boolean</returns>
-        public override bool Equals(object obj)
-        {
-            if (obj is null) { return false; }
-            if (ReferenceEquals(this, obj)) { return true; }
-            return obj.GetType() == GetType() && Equals((Role)obj);
-        }
-
-        /// <summary>
-        /// Returns true if Role instances are equal
-        /// </summary>
-        /// <param name="other">Instance of Role to be compared</param>
-        /// <returns>Boolean</returns>
-        public bool Equals(Role other)
-        {
-            if (other is null) { return false; }
-            if (ReferenceEquals(this, other)) { return true; }
-
-            return                 
-                (
-                    Id == other.Id ||
-                    Id.Equals(other.Id)
-                ) &&                 
-                (
-                    Name == other.Name ||
-                    Name != null &&
-                    Name.Equals(other.Name)
-                ) &&                 
-                (
-                    Description == other.Description ||
-                    Description != null &&
-                    Description.Equals(other.Description)
-                ) && 
-                (
-                    RolePermissions == other.RolePermissions ||
-                    RolePermissions != null &&
-                    RolePermissions.SequenceEqual(other.RolePermissions)
-                ) && 
-                (
-                    UserRoles == other.UserRoles ||
-                    UserRoles != null &&
-                    UserRoles.SequenceEqual(other.UserRoles)
-                );
-        }
-
-        /// <summary>
-        /// Gets the hash code
-        /// </summary>
-        /// <returns>Hash code</returns>
-        public override int GetHashCode()
-        {
-            // credit: http://stackoverflow.com/a/263416/677735
-            unchecked // Overflow is fine, just wrap
-            {
-                int hash = 41;
-
-                // Suitable nullity checks                                   
-                hash = hash * 59 + Id.GetHashCode();
-
-                if (Name != null)
-                {
-                    hash = hash * 59 + Name.GetHashCode();
-                }
-
-                if (Description != null)
-                {
-                    hash = hash * 59 + Description.GetHashCode();
-                }                
-                                   
-                if (RolePermissions != null)
-                {
-                    hash = hash * 59 + RolePermissions.GetHashCode();
-                }
-
-                if (UserRoles != null)
-                {
-                    hash = hash * 59 + UserRoles.GetHashCode();
-                }
-
-                return hash;
-            }
-        }
-
-        #region Operators
-        
-        /// <summary>
-        /// Equals
-        /// </summary>
-        /// <param name="left"></param>
-        /// <param name="right"></param>
-        /// <returns></returns>
-        public static bool operator ==(Role left, Role right)
-        {
-            return Equals(left, right);
-        }
-
-        /// <summary>
-        /// Not Equals
-        /// </summary>
-        /// <param name="left"></param>
-        /// <param name="right"></param>
-        /// <returns></returns>
-        public static bool operator !=(Role left, Role right)
-        {
-            return !Equals(left, right);
-        }
-
-        #endregion Operators
-    }
-}
diff --git a/embc-app/Models/RolePermission.cs b/embc-app/Models/RolePermission.cs
deleted file mode 100644
index 80d395a..0000000
--- a/embc-app/Models/RolePermission.cs
+++ /dev/null
@@ -1,188 +0,0 @@
-using System;
-using System.Text;
-using Newtonsoft.Json;
-using System.ComponentModel.DataAnnotations.Schema;
-using System.ComponentModel.DataAnnotations;
-
-namespace Gov.Jag.Embc.Public.Models
-{
-    /// <summary>
-    /// Role Permission Database Model
-    /// </summary>
-    public sealed class RolePermission : IEquatable<RolePermission>
-    {
-        /// <summary>
-        /// Initializes a new instance of the <see cref="RolePermission" /> class.
-        /// </summary>
-        /// <param name="id">A system-generated unique identifier for a RolePermission (required).</param>
-        /// <param name="role">Role (required).</param>
-        /// <param name="permission">A foreign key reference to the system-generated unique identifier for a Permission (required).</param>
-        public RolePermission(Guid id, Role role, Permission permission)
-        {   
-            Id = id;
-            Role = role;
-            Permission = permission;
-        }
-
-        public RolePermission(Role role, Permission permission)
-        {            
-            Role = role;
-            Permission = permission;
-        }
-
-        public RolePermission()
-        {         
-        }
-
-        /// <summary>
-        /// A system-generated unique identifier for a RolePermission
-        /// </summary>
-        /// <value>A system-generated unique identifier for a RolePermission</value>
-        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
-        public Guid Id { get; set; }
-
-        /// <summary>
-        /// Gets or Sets Role
-        /// </summary>
-        public Role Role { get; set; }
-        
-        /// <summary>
-        /// Foreign key for Role 
-        /// </summary>   
-        [ForeignKey("Role")]
-		[JsonIgnore]		
-        public Guid? RoleId { get; set; }
-        
-        /// <summary>
-        /// A foreign key reference to the system-generated unique identifier for a Permission
-        /// </summary>
-        /// <value>A foreign key reference to the system-generated unique identifier for a Permission</value>
-                public Permission Permission { get; set; }
-        
-        /// <summary>
-        /// Foreign key for Permission 
-        /// </summary>   
-        [ForeignKey("Permission")]
-		[JsonIgnore]
-        public Guid? PermissionId { get; set; }
-        
-        /// <summary>
-        /// Returns the string presentation of the object
-        /// </summary>
-        /// <returns>String presentation of the object</returns>
-        public override string ToString()
-        {
-            var sb = new StringBuilder();
-
-            sb.Append("class RolePermission {\n");
-            sb.Append("  Id: ").Append(Id).Append("\n");
-            sb.Append("  Role: ").Append(Role).Append("\n");
-            sb.Append("  Permission: ").Append(Permission).Append("\n");
-            sb.Append("}\n");
-
-            return sb.ToString();
-        }
-
-        /// <summary>
-        /// Returns the JSON string presentation of the object
-        /// </summary>
-        /// <returns>JSON string presentation of the object</returns>
-        public string ToJson()
-        {
-            return JsonConvert.SerializeObject(this, Formatting.Indented);
-        }
-
-        /// <summary>
-        /// Returns true if objects are equal
-        /// </summary>
-        /// <param name="obj">Object to be compared</param>
-        /// <returns>Boolean</returns>
-        public override bool Equals(object obj)
-        {
-            if (obj is null) { return false; }
-            if (ReferenceEquals(this, obj)) { return true; }
-            return obj.GetType() == this.GetType() && Equals((RolePermission)obj);
-        }
-
-        /// <summary>
-        /// Returns true if RolePermission instances are equal
-        /// </summary>
-        /// <param name="other">Instance of RolePermission to be compared</param>
-        /// <returns>Boolean</returns>
-        public bool Equals(RolePermission other)
-        {
-            if (other is null) { return false; }
-            if (ReferenceEquals(this, other)) { return true; }
-
-            return                 
-                (
-                    Id == other.Id ||
-                    Id.Equals(other.Id)
-                ) &&                 
-                (
-                    Role == other.Role ||
-                    Role != null &&
-                    Role.Equals(other.Role)
-                ) &&                 
-                (
-                    Permission == other.Permission ||
-                    Permission != null &&
-                    Permission.Equals(other.Permission)
-                );
-        }
-
-        /// <summary>
-        /// Gets the hash code
-        /// </summary>
-        /// <returns>Hash code</returns>
-        public override int GetHashCode()
-        {
-            // credit: http://stackoverflow.com/a/263416/677735
-            unchecked // Overflow is fine, just wrap
-            {
-                int hash = 41;
-
-                // Suitable nullity checks                                   
-                hash = hash * 59 + Id.GetHashCode();        
-                
-                if (Role != null)
-                {
-                    hash = hash * 59 + Role.GetHashCode();
-                }
-
-                if (Permission != null)
-                {
-                    hash = hash * 59 + Permission.GetHashCode();
-                }
-
-                return hash;
-            }
-        }
-
-        #region Operators
-        
-        /// <summary>
-        /// Equals
-        /// </summary>
-        /// <param name="left"></param>
-        /// <param name="right"></param>
-        /// <returns></returns>
-        public static bool operator ==(RolePermission left, RolePermission right)
-        {
-            return Equals(left, right);
-        }
-
-        /// <summary>
-        /// Not Equals
-        /// </summary>
-        /// <param name="left"></param>
-        /// <param name="right"></param>
-        /// <returns></returns>
-        public static bool operator !=(RolePermission left, RolePermission right)
-        {
-            return !Equals(left, right);
-        }
-
-        #endregion Operators
-    }
-}
diff --git a/embc-app/Models/User.cs b/embc-app/Models/User.cs
deleted file mode 100644
index 092bdfb..0000000
--- a/embc-app/Models/User.cs
+++ /dev/null
@@ -1,323 +0,0 @@
-using Newtonsoft.Json;
-using System;
-using System.Collections.Generic;
-using System.ComponentModel.DataAnnotations;
-using System.ComponentModel.DataAnnotations.Schema;
-using System.Linq;
-using System.Text;
-
-namespace Gov.Jag.Embc.Public.Models
-{
-    /// <summary>
-    /// User Database Model
-    /// </summary>
-    public partial class User : IEquatable<User>
-    {
-        /// <summary>
-        /// User Database Model Constructor (required by entity framework)
-        /// </summary>
-
-        /// <summary>
-        /// Initializes a new instance of the <see cref="User" /> class.
-        /// </summary>
-        /// <param name="id">A system-generated unique identifier for a User (required).</param>
-        /// <param name="givenName">Given name of the user. (required).</param>
-        /// <param name="surname">Surname of the user. (required).</param>
-        /// <param name="active">A flag indicating the User is active in the system. Set false to remove access to the system for the user. (required).</param>
-        /// <param name="initials">Initials of the user, to be presented where screen space is at a premium..</param>
-        /// <param name="email">The email address of the user in the system..</param>
-        /// <param name="smUserId">Security Manager User ID.</param>
-        /// <param name="guid">The GUID unique to the user as provided by the authentication system. In this case, authentication is done by Siteminder and the GUID uniquely identifies the user within the user directories managed by Siteminder - e.g. IDIR and BCeID. The GUID is equivalent to the IDIR Id, but is guaranteed unique to a person, while the IDIR ID is not - IDIR IDs can be recycled..</param>
-        /// <param name="userType">The user directory service used by Siteminder to authenticate the user - usually IDIR or BCeID..</param>
-        /// <param name="userRoles">UserRoles.</param>
-        /// <param name="district">The District that the User belongs to.</param>
-        public User(Guid id, string givenName, string surname, bool active, string initials = null, string email = null,
-            string smUserId = null, string accountId = null, string userType = null, List<UserRole> userRoles = null)
-        {
-            ContactId = id;
-            GivenName = givenName;
-            Surname = surname;
-            Active = active;
-            Initials = initials;
-            Email = email;
-            SmUserId = smUserId;
-            if (accountId != null)
-            {
-                AccountId = Guid.Parse(accountId);
-            }
-            UserType = userType;
-            UserRoles = userRoles;
-        }
-
-        public User()
-        {
-        }
-
-        /// <summary>
-        /// A system-generated unique identifier for a User
-        /// </summary>
-        /// <value>A system-generated unique identifier for a User</value>
-        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
-        [Key]
-        public Guid ContactId { get; set; }
-
-        /// <summary>
-        /// Given name of the user.
-        /// </summary>
-        /// <value>Given name of the user.</value>
-        [MaxLength(50)]
-        public string GivenName { get; set; }
-
-        /// <summary>
-        /// Surname of the user.
-        /// </summary>
-        /// <value>Surname of the user.</value>
-        [MaxLength(50)]
-        public string Surname { get; set; }
-
-        /// <summary>
-        /// A flag indicating the User is active in the system. Set false to remove access to the system for the user.
-        /// </summary>
-        /// <value>A flag indicating the User is active in the system. Set false to remove access to the system for the user.</value>
-        public bool Active { get; set; }
-
-        /// <summary>
-        /// Initials of the user, to be presented where screen space is at a premium.
-        /// </summary>
-        /// <value>Initials of the user, to be presented where screen space is at a premium.</value>
-        [MaxLength(10)]
-        public string Initials { get; set; }
-
-        /// <summary>
-        /// The email address of the user in the system.
-        /// </summary>
-        /// <value>The email address of the user in the system.</value>
-        [MaxLength(255)]
-        public string Email { get; set; }
-
-        /// <summary>
-        /// Security Manager User ID
-        /// </summary>
-        /// <value>Security Manager User ID</value>
-        [MaxLength(255)]
-        public string SmUserId { get; set; }
-
-        /// <summary>
-        /// The GUID for the Dynamics Account of the user
-        /// </summary>
-        /// <value></value>
-        public Guid AccountId { get; set; }
-
-        /// <summary>
-        /// The siteminder user guid
-        /// </summary>
-        [MaxLength(255)]
-        public string SiteMinderGuid { get; set; }
-
-        /// <summary>
-        /// The user directory service used by Siteminder to authenticate the user - usually IDIR or BCeID.
-        /// </summary>
-        /// <value>The user directory service used by Siteminder to authenticate the user - usually IDIR or BCeID.</value>
-        [MaxLength(255)]
-        public string UserType { get; set; }
-
-        /// <summary>
-        /// Gets or Sets UserRoles
-        /// </summary>
-        public List<UserRole> UserRoles { get; set; }
-
-        public bool? IsAdministrator { get; internal set; }
-
-        /// <summary>
-        /// Returns the string presentation of the object
-        /// </summary>
-        /// <returns>String presentation of the object</returns>
-        public override string ToString()
-        {
-            var sb = new StringBuilder();
-
-            sb.Append("class User {\n");
-            sb.Append("  Id: ").Append(ContactId).Append("\n");
-            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
-            sb.Append("  Surname: ").Append(Surname).Append("\n");
-            sb.Append("  Active: ").Append(Active).Append("\n");
-            sb.Append("  Initials: ").Append(Initials).Append("\n");
-            sb.Append("  Email: ").Append(Email).Append("\n");
-            sb.Append("  SmUserId: ").Append(SmUserId).Append("\n");
-            sb.Append("  Guid: ").Append(AccountId).Append("\n");
-            sb.Append("  SmAuthorizationDirectory: ").Append(UserType).Append("\n");
-            sb.Append("  UserRoles: ").Append(UserRoles).Append("\n");
-            sb.Append("}\n");
-
-            return sb.ToString();
-        }
-
-        /// <summary>
-        /// Returns the JSON string presentation of the object
-        /// </summary>
-        /// <returns>JSON string presentation of the object</returns>
-        public string ToJson()
-        {
-            return JsonConvert.SerializeObject(this, Formatting.Indented);
-        }
-
-        /// <summary>
-        /// Returns true if objects are equal
-        /// </summary>
-        /// <param name="obj">Object to be compared</param>
-        /// <returns>Boolean</returns>
-        public override bool Equals(object obj)
-        {
-            if (obj is null) { return false; }
-            if (ReferenceEquals(this, obj)) { return true; }
-            return obj.GetType() == GetType() && Equals((User)obj);
-        }
-
-        /// <summary>
-        /// Returns true if User instances are equal
-        /// </summary>
-        /// <param name="other">Instance of User to be compared</param>
-        /// <returns>Boolean</returns>
-        public bool Equals(User other)
-        {
-            if (other is null) { return false; }
-            if (ReferenceEquals(this, other)) { return true; }
-
-            return
-                (
-                    ContactId == other.ContactId ||
-                    ContactId.Equals(other.ContactId)
-                ) &&
-                (
-                    GivenName == other.GivenName ||
-                    GivenName != null &&
-                    GivenName.Equals(other.GivenName)
-                ) &&
-                (
-                    Surname == other.Surname ||
-                    Surname != null &&
-                    Surname.Equals(other.Surname)
-                ) &&
-                (
-                    Active == other.Active ||
-                    Active.Equals(other.Active)
-                ) &&
-                (
-                    Initials == other.Initials ||
-                    Initials != null &&
-                    Initials.Equals(other.Initials)
-                ) &&
-                (
-                    Email == other.Email ||
-                    Email != null &&
-                    Email.Equals(other.Email)
-                ) &&
-                (
-                    SmUserId == other.SmUserId ||
-                    SmUserId != null &&
-                    SmUserId.Equals(other.SmUserId)
-                ) &&
-                (
-                    AccountId == other.AccountId ||
-                    AccountId != null &&
-                    AccountId.Equals(other.AccountId)
-                ) &&
-                (
-                    UserType == other.UserType ||
-                    UserType != null &&
-                    UserType.Equals(other.UserType)
-                ) &&
-                (
-                    UserRoles == other.UserRoles ||
-                    UserRoles != null &&
-                    UserRoles.SequenceEqual(other.UserRoles)
-                );
-        }
-
-        /// <summary>
-        /// Gets the hash code
-        /// </summary>
-        /// <returns>Hash code</returns>
-        public override int GetHashCode()
-        {
-            // credit: http://stackoverflow.com/a/263416/677735
-            unchecked // Overflow is fine, just wrap
-            {
-                int hash = 41;
-
-                // Suitable nullity checks
-                hash = hash * 59 + ContactId.GetHashCode();
-
-                if (GivenName != null)
-                {
-                    hash = hash * 59 + GivenName.GetHashCode();
-                }
-
-                if (Surname != null)
-                {
-                    hash = hash * 59 + Surname.GetHashCode();
-                }
-
-                hash = hash * 59 + Active.GetHashCode();
-
-                if (Initials != null)
-                {
-                    hash = hash * 59 + Initials.GetHashCode();
-                }
-
-                if (Email != null)
-                {
-                    hash = hash * 59 + Email.GetHashCode();
-                }
-
-                if (SmUserId != null)
-                {
-                    hash = hash * 59 + SmUserId.GetHashCode();
-                }
-
-                if (AccountId != null)
-                {
-                    hash = hash * 59 + AccountId.GetHashCode();
-                }
-
-                if (UserType != null)
-                {
-                    hash = hash * 59 + UserType.GetHashCode();
-                }
-
-                if (UserRoles != null)
-                {
-                    hash = hash * 59 + UserRoles.GetHashCode();
-                }
-
-                return hash;
-            }
-        }
-
-        #region Operators
-
-        /// <summary>
-        /// Equals
-        /// </summary>
-        /// <param name="left"></param>
-        /// <param name="right"></param>
-        /// <returns></returns>
-        public static bool operator ==(User left, User right)
-        {
-            return Equals(left, right);
-        }
-
-        /// <summary>
-        /// Not Equals
-        /// </summary>
-        /// <param name="left"></param>
-        /// <param name="right"></param>
-        /// <returns></returns>
-        public static bool operator !=(User left, User right)
-        {
-            return !Equals(left, right);
-        }
-
-        #endregion Operators
-    }
-}
diff --git a/embc-app/Models/UserRole.cs b/embc-app/Models/UserRole.cs
deleted file mode 100644
index b59129a..0000000
--- a/embc-app/Models/UserRole.cs
+++ /dev/null
@@ -1,193 +0,0 @@
-using System;
-using System.Text;
-using Newtonsoft.Json;
-using System.ComponentModel.DataAnnotations.Schema;
-using System.ComponentModel.DataAnnotations;
-
-namespace Gov.Jag.Embc.Public.Models
-{
-    /// <summary>
-    /// User Role Database Model
-    /// </summary>
-    public sealed class UserRole : IEquatable<UserRole>
-    {
-
-
-        /// <summary>
-        /// Initializes a new instance of the <see cref="UserRole" /> class.
-        /// </summary>
-        /// <param name="id">A system-generated unique identifier for a UserRole (required).</param>
-        /// <param name="effectiveDate">The date on which the user was given the related role. (required).</param>
-        /// <param name="expiryDate">The date on which a role previously assigned to a user was removed from that user..</param>
-        /// <param name="role">A foreign key reference to the system-generated unique identifier for a Role.</param>
-        public UserRole(Guid id, DateTime effectiveDate, DateTime? expiryDate = null, Role role = null)
-        {   
-            Id = id;
-            EffectiveDate = effectiveDate;
-            ExpiryDate = expiryDate;
-            Role = role;
-        }
-
-        public UserRole()
-        {
-
-        }
-
-        /// <summary>
-        /// A system-generated unique identifier for a UserRole
-        /// </summary>
-        /// <value>A system-generated unique identifier for a UserRole</value>
-        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
-        public Guid Id { get; set; }
-
-        /// <summary>
-        /// The date on which the user was given the related role.
-        /// </summary>
-        /// <value>The date on which the user was given the related role.</value>
-        public DateTime EffectiveDate { get; set; }
-        
-        /// <summary>
-        /// The date on which a role previously assigned to a user was removed from that user.
-        /// </summary>
-        /// <value>The date on which a role previously assigned to a user was removed from that user.</value>
-        public DateTime? ExpiryDate { get; set; }
-        
-        /// <summary>
-        /// A foreign key reference to the system-generated unique identifier for a Role
-        /// </summary>
-        /// <value>A foreign key reference to the system-generated unique identifier for a Role</value>
-        public Role Role { get; set; }
-        
-        /// <summary>
-        /// Foreign key for Role 
-        /// </summary>   
-        [ForeignKey("Role")]
-		[JsonIgnore]
-        public Guid? RoleId { get; set; }
-        
-        /// <summary>
-        /// Returns the string presentation of the object
-        /// </summary>
-        /// <returns>String presentation of the object</returns>
-        public override string ToString()
-        {
-            var sb = new StringBuilder();
-
-            sb.Append("class UserRole {\n");
-            sb.Append("  Id: ").Append(Id).Append("\n");
-            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
-            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
-            sb.Append("  Role: ").Append(Role).Append("\n");
-            sb.Append("}\n");
-
-            return sb.ToString();
-        }
-
-        /// <summary>
-        /// Returns the JSON string presentation of the object
-        /// </summary>
-        /// <returns>JSON string presentation of the object</returns>
-        public string ToJson()
-        {
-            return JsonConvert.SerializeObject(this, Formatting.Indented);
-        }
-
-        /// <summary>
-        /// Returns true if objects are equal
-        /// </summary>
-        /// <param name="obj">Object to be compared</param>
-        /// <returns>Boolean</returns>
-        public override bool Equals(object obj)
-        {
-            if (obj is null) { return false; }
-            if (ReferenceEquals(this, obj)) { return true; }
-            return obj.GetType() == GetType() && Equals((UserRole)obj);
-        }
-
-        /// <summary>
-        /// Returns true if UserRole instances are equal
-        /// </summary>
-        /// <param name="other">Instance of UserRole to be compared</param>
-        /// <returns>Boolean</returns>
-        public bool Equals(UserRole other)
-        {
-            if (other is null) { return false; }
-            if (ReferenceEquals(this, other)) { return true; }
-
-            return                 
-                (
-                    Id == other.Id ||
-                    Id.Equals(other.Id)
-                ) &&                 
-                (
-                    EffectiveDate == other.EffectiveDate ||
-                    EffectiveDate.Equals(other.EffectiveDate)
-                ) &&                 
-                (
-                    ExpiryDate == other.ExpiryDate ||
-                    ExpiryDate != null &&
-                    ExpiryDate.Equals(other.ExpiryDate)
-                ) &&                 
-                (
-                    Role == other.Role ||
-                    Role != null &&
-                    Role.Equals(other.Role)
-                );
-        }
-
-        /// <summary>
-        /// Gets the hash code
-        /// </summary>
-        /// <returns>Hash code</returns>
-        public override int GetHashCode()
-        {
-            // credit: http://stackoverflow.com/a/263416/677735
-            unchecked // Overflow is fine, just wrap
-            {
-                int hash = 41;
-
-                // Suitable nullity checks                                   
-                hash = hash * 59 + Id.GetHashCode();    
-                hash = hash * 59 + EffectiveDate.GetHashCode();
-
-                if (ExpiryDate != null)
-                {
-                    hash = hash * 59 + ExpiryDate.GetHashCode();
-                }                
-                                   
-                if (Role != null)
-                {
-                    hash = hash * 59 + Role.GetHashCode();
-                }
-
-                return hash;
-            }
-        }
-
-        #region Operators
-        
-        /// <summary>
-        /// Equals
-        /// </summary>
-        /// <param name="left"></param>
-        /// <param name="right"></param>
-        /// <returns></returns>
-        public static bool operator ==(UserRole left, UserRole right)
-        {
-            return Equals(left, right);
-        }
-
-        /// <summary>
-        /// Not Equals
-        /// </summary>
-        /// <param name="left"></param>
-        /// <param name="right"></param>
-        /// <returns></returns>
-        public static bool operator !=(UserRole left, UserRole right)
-        {
-            return !Equals(left, right);
-        }
-
-        #endregion Operators
-    }
-}
diff --git a/embc-app/Startup.cs b/embc-app/Startup.cs
index f5ba058..3686d09 100644
--- a/embc-app/Startup.cs
+++ b/embc-app/Startup.cs
@@ -1,8 +1,5 @@
-using Gov.Jag.Embc.Interfaces;
 using Gov.Jag.Embc.Public.Authentication;
-using Gov.Jag.Embc.Public.Authorization;
 using Gov.Jag.Embc.Public.DataInterfaces;
-using Gov.Jag.Embc.Public.Models;
 using Gov.Jag.Embc.Public.Seeder;
 using Gov.Jag.Embc.Public.Utils;
 using Microsoft.AspNetCore.Authorization;
@@ -10,7 +7,6 @@ using Microsoft.AspNetCore.Builder;
 using Microsoft.AspNetCore.DataProtection;
 using Microsoft.AspNetCore.Hosting;
 using Microsoft.AspNetCore.Http;
-using Microsoft.AspNetCore.Http.Features;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.AspNetCore.Mvc.Authorization;
 using Microsoft.AspNetCore.Mvc.Infrastructure;
@@ -21,7 +17,6 @@ using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.HealthChecks;
 using Microsoft.Extensions.Logging;
-using Microsoft.IdentityModel.Clients.ActiveDirectory;
 using Microsoft.Net.Http.Headers;
 using NWebsec.AspNetCore.Mvc;
 using NWebsec.AspNetCore.Mvc.Csp;
@@ -104,14 +99,6 @@ namespace Gov.Jag.Embc.Public
             {
             });
 
-            // setup authorization
-            services.AddAuthorization(options =>
-            {
-                options.AddPolicy("Business-User", policy =>
-                                  policy.RequireClaim(User.UserTypeClaim, "Business"));
-            });
-            services.RegisterPermissionHandler();
-
             // setup key ring to persist in storage.
             if (!string.IsNullOrEmpty(Configuration["KEY_RING_DIRECTORY"]))
             {
@@ -124,12 +111,6 @@ namespace Gov.Jag.Embc.Public
                 configuration.RootPath = "ClientApp/dist";
             });
 
-            // allow for large files to be uploaded
-            services.Configure<FormOptions>(options =>
-            {
-                options.MultipartBodyLengthLimit = 1073741824; // 1 GB
-            });
-
             // health checks
             services.AddHealthChecks(checks =>
             {
@@ -155,39 +136,6 @@ namespace Gov.Jag.Embc.Public
             services.AddTransient<IEmailSender, EmailSender>();
         }
 
-        private void SetupDynamics(IServiceCollection services)
-        {
-            string dynamicsOdataUri = Configuration["DYNAMICS_ODATA_URI"];
-            string aadTenantId = Configuration["DYNAMICS_AAD_TENANT_ID"];
-            string serverAppIdUri = Configuration["DYNAMICS_SERVER_APP_ID_URI"];
-            string clientKey = Configuration["DYNAMICS_CLIENT_KEY"];
-            string clientId = Configuration["DYNAMICS_CLIENT_ID"];
-
-            string ssgUsername = Configuration["SSG_USERNAME"];
-            string ssgPassword = Configuration["SSG_PASSWORD"];
-
-            AuthenticationResult authenticationResult = null;
-            // authenticate using ADFS.
-            if (string.IsNullOrEmpty(ssgUsername) || string.IsNullOrEmpty(ssgPassword))
-            {
-                var authenticationContext = new AuthenticationContext(
-                    "https://login.windows.net/" + aadTenantId);
-                ClientCredential clientCredential = new ClientCredential(clientId, clientKey);
-                var task = authenticationContext.AcquireTokenAsync(serverAppIdUri, clientCredential);
-                task.Wait();
-                authenticationResult = task.Result;
-            }
-
-            // add BCeID Web Services
-
-            string bceidUrl = Configuration["BCEID_SERVICE_URL"];
-            string bceidSvcId = Configuration["BCEID_SERVICE_SVCID"];
-            string bceidUserid = Configuration["BCEID_SERVICE_USER"];
-            string bceidPasswd = Configuration["BCEID_SERVICE_PASSWD"];
-
-            services.AddTransient<BCeIDBusinessQuery>(_ => new BCeIDBusinessQuery(bceidSvcId, bceidUserid, bceidPasswd, bceidUrl));
-        }
-
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
         public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
         {
diff --git a/embc-app/Utils/BusinessNumberSanitizer.cs b/embc-app/Utils/BusinessNumberSanitizer.cs
deleted file mode 100644
index a224bfa..0000000
--- a/embc-app/Utils/BusinessNumberSanitizer.cs
+++ /dev/null
@@ -1,34 +0,0 @@
-ï»¿
-using System;
-using System.Security.Cryptography;
-using System.Text;
-using System.Text.RegularExpressions;
-
-namespace Gov.Jag.Embc.Public.Utils
-{
-	/// <summary>
-	/// Helper methods for working with <see cref="Guid"/>.
-	/// </summary>
-	public static class BusinessNumberSanitizer
-	{
-		/// <summary>
-		/// Removes white spaces from the business number. Returns null if the resulting string
-		/// is not 9 digits
-		/// </summary>
-		/// <param name="businessNumber"></param>
-		/// <returns></returns>
-		public static string SanitizeNumber(string businessNumber){
-            if (string.IsNullOrEmpty(businessNumber))
-            {
-                return null;
-            }
-			//sanitize the business number
-			string result = Regex.Replace(businessNumber, "\\s", "");
-			//validate the result
-			if(!Regex.IsMatch(result, "^\\d\\d\\d\\d\\d\\d\\d\\d\\d$")){
-				result = null;
-			}
-			return result;
-		}
-    }
-}
diff --git a/embc-app/Utils/EncryptionUtility.cs b/embc-app/Utils/EncryptionUtility.cs
deleted file mode 100644
index 562b60c..0000000
--- a/embc-app/Utils/EncryptionUtility.cs
+++ /dev/null
@@ -1,96 +0,0 @@
-ï»¿using System;
-using System.IO;
-using System.Security.Cryptography;
-using System.Text;
-using System.Web;
-
-namespace Gov.Jag.Embc.Public.Utility
-{
-    /// <summary>
-    /// Helper methods for working with encryption
-    /// </summary>
-    public static class EncryptionUtility
-	{
-
-        /// <summary>
-        /// Encrypt a string using AES
-        /// </summary>
-        /// <param name="text">The string to encrypt</param>
-        /// <param name="keyString">The secret key</param>
-        /// <returns></returns>
-        public static string EncryptString(string text, string keyString)
-        {
-            string result = null;
-
-            using (Aes aes = Aes.Create())
-            {
-                byte[] key = Encoding.UTF8.GetBytes(keyString.Substring(0, aes.Key.Length));
-
-                using (var encryptor = aes.CreateEncryptor(key, aes.IV))
-                {
-                    using (var msEncrypt = new MemoryStream())
-                    {
-                        using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
-                        using (var swEncrypt = new StreamWriter(csEncrypt))
-                        {
-                            swEncrypt.Write(text);
-                        }
-
-                        var iv = aes.IV;
-
-                        var decryptedContent = msEncrypt.ToArray();
-
-                        byte[] byteResult = new byte[iv.Length + decryptedContent.Length];
-
-                        Buffer.BlockCopy(iv, 0, byteResult, 0, iv.Length);
-                        Buffer.BlockCopy(decryptedContent, 0, byteResult, iv.Length, decryptedContent.Length);
-
-                        result = Convert.ToBase64String(byteResult);
-                    }
-                }
-            }
-            return result;
-        }
-
-        public static string DecryptString(string cipherText, string keyString)
-        {
-            string result = null;
-            try
-            {
-                cipherText = HttpUtility.UrlDecode(cipherText);
-                cipherText = cipherText.Replace(" ", "+");
-                var fullCipher = Convert.FromBase64String(cipherText);
-
-                var iv = new byte[16];
-                var cipher = new byte[fullCipher.Length - iv.Length];
-
-                Buffer.BlockCopy(fullCipher, 0, iv, 0, iv.Length);
-                Buffer.BlockCopy(fullCipher, iv.Length, cipher, 0, fullCipher.Length - iv.Length);
-
-                using (var aesAlg = Aes.Create())
-                {
-                    var key = Encoding.UTF8.GetBytes(keyString.Substring(0, aesAlg.Key.Length));
-                    using (var decryptor = aesAlg.CreateDecryptor(key, iv))
-                    {
-                        using (var msDecrypt = new MemoryStream(cipher))
-                        {
-                            using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
-                            {
-                                using (var srDecrypt = new StreamReader(csDecrypt))
-                                {
-                                    result = srDecrypt.ReadToEnd();
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-            catch (Exception)
-            {
-                // invalid code. Return a null value 
-                result = null;
-            }
-            return result;
-        }
-    }
-}
diff --git a/embc-app/Utils/GuidUtility.cs b/embc-app/Utils/GuidUtility.cs
deleted file mode 100644
index 9db77e7..0000000
--- a/embc-app/Utils/GuidUtility.cs
+++ /dev/null
@@ -1,147 +0,0 @@
-ï»¿
-using System;
-using System.Security.Cryptography;
-using System.Text;
-
-namespace Gov.Jag.Embc.Public.Utils
-{
-	/// <summary>
-	/// Helper methods for working with <see cref="Guid"/>.
-	/// </summary>
-	public static class GuidUtility
-	{
-		/// <summary>
-		/// Creates a name-based UUID using the algorithm from RFC 4122 Â§4.3.
-		/// </summary>
-		/// <param name="namespaceId">The ID of the namespace.</param>
-		/// <param name="name">The name (within that namespace).</param>
-		/// <returns>A UUID derived from the namespace and name.</returns>
-		/// <remarks>See <a href="http://code.logos.com/blog/2011/04/generating_a_deterministic_guid.html">Generating a deterministic GUID</a>.</remarks>
-		public static Guid Create(Guid namespaceId, string name)
-		{
-			return Create(namespaceId, name, 5);
-		}
-
-        public static Guid CreateIdForDynamics(string entity, string name) 
-		{
-			return Create(IsoOidNamespace, entity + "." + name, 5);
-		}
-
-		/// <summary>
-		/// Creates a name-based UUID using the algorithm from RFC 4122 Â§4.3.
-		/// </summary>
-		/// <param name="namespaceId">The ID of the namespace.</param>
-		/// <param name="name">The name (within that namespace).</param>
-		/// <param name="version">The version number of the UUID to create; this value must be either
-		/// 3 (for MD5 hashing) or 5 (for SHA-1 hashing).</param>
-		/// <returns>A UUID derived from the namespace and name.</returns>
-		/// <remarks>See <a href="http://code.logos.com/blog/2011/04/generating_a_deterministic_guid.html">Generating a deterministic GUID</a>.</remarks>
-		public static Guid Create(Guid namespaceId, string name, int version)
-		{
-			if (name == null)
-				throw new ArgumentNullException("name");
-			if (version != 3 && version != 5)
-				throw new ArgumentOutOfRangeException("version", "version must be either 3 or 5.");
-
-			// convert the name to a sequence of octets (as defined by the standard or conventions of its namespace) (step 3)
-			// ASSUME: UTF-8 encoding is always appropriate
-			byte[] nameBytes = Encoding.UTF8.GetBytes(name);
-
-			// convert the namespace UUID to network order (step 3)
-			byte[] namespaceBytes = namespaceId.ToByteArray();
-			SwapByteOrder(namespaceBytes);
-
-			// comput the hash of the name space ID concatenated with the name (step 4)
-			byte[] hash;
-			using (HashAlgorithm algorithm = version == 3 ? (HashAlgorithm) MD5.Create() : SHA1.Create())
-			{
-				algorithm.TransformBlock(namespaceBytes, 0, namespaceBytes.Length, null, 0);
-				algorithm.TransformFinalBlock(nameBytes, 0, nameBytes.Length);
-				hash = algorithm.Hash;
-			}
-
-			// most bytes from the hash are copied straight to the bytes of the new GUID (steps 5-7, 9, 11-12)
-			byte[] newGuid = new byte[16];
-			Array.Copy(hash, 0, newGuid, 0, 16);
-
-			// set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the appropriate 4-bit version number from Section 4.1.3 (step 8)
-			newGuid[6] = (byte) ((newGuid[6] & 0x0F) | (version << 4));
-
-			// set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively (step 10)
-			newGuid[8] = (byte) ((newGuid[8] & 0x3F) | 0x80);
-
-			// convert the resulting UUID to local byte order (step 13)
-			SwapByteOrder(newGuid);
-			return new Guid(newGuid);
-		}
-
-		/// <summary>
-		/// The namespace for fully-qualified domain names (from RFC 4122, Appendix C).
-		/// </summary>
-		public static readonly Guid DnsNamespace = new Guid("6ba7b810-9dad-11d1-80b4-00c04fd430c8");
-
-		/// <summary>
-		/// The namespace for URLs (from RFC 4122, Appendix C).
-		/// </summary>
-		public static readonly Guid UrlNamespace = new Guid("6ba7b811-9dad-11d1-80b4-00c04fd430c8");
-
-		/// <summary>
-		/// The namespace for ISO OIDs (from RFC 4122, Appendix C).
-		/// </summary>
-		public static readonly Guid IsoOidNamespace = new Guid("6ba7b812-9dad-11d1-80b4-00c04fd430c8");
-
-		// Converts a GUID (expressed as a byte array) to/from network order (MSB-first).
-		public static void SwapByteOrder(byte[] guid)
-		{
-			SwapBytes(guid, 0, 3);
-			SwapBytes(guid, 1, 2);
-			SwapBytes(guid, 4, 5);
-			SwapBytes(guid, 6, 7);
-		}
-
-		private static void SwapBytes(byte[] guid, int left, int right)
-		{
-			byte temp = guid[left];
-			guid[left] = guid[right];
-			guid[right] = temp;
-		}
-
-        public static string SanitizeGuidString(string guid)
-        {
-            string result = null;
-            if (!string.IsNullOrEmpty(guid))
-            {
-                result = guid.Replace("-","");
-                result = result.ToUpper();
-            }
-            return result;
-        }
-
-        /// <summary>
-        /// Covert a string to a nullable guid.  
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns></returns>
-        public static Guid? SafeNullableGuidConvert(string id)
-        {
-            Guid? result = null;
-            if (!string.IsNullOrEmpty(id))
-            {
-                result = (Guid?)SafeGuidConvert(id);
-            }
-            return result;
-        }
-
-        /// <summary>
-        /// Convert a string to a guid.
-        /// </summary>
-        /// <param name="id"></param>
-        /// <returns>Guid or Guid.empty if the string is invalid.</returns>
-        public static Guid SafeGuidConvert(string id)
-        {
-            Guid result = new Guid();
-            Guid.TryParse(id, out result);
-            return result;
-        }
-    }
-}
diff --git a/embc-app/Utils/IQueryableExtensions.cs b/embc-app/Utils/IQueryableExtensions.cs
index c3d260d..96ed483 100644
--- a/embc-app/Utils/IQueryableExtensions.cs
+++ b/embc-app/Utils/IQueryableExtensions.cs
@@ -11,17 +11,17 @@ namespace Gov.Jag.Embc.Public.Utils
         {
             if (source == null)
             {
-                throw new ArgumentNullException("source");
+                throw new ArgumentNullException(nameof(source));
             }
 
             if (string.IsNullOrEmpty(sortBy))
             {
-                throw new ArgumentNullException("sortBy");
+                throw new ArgumentNullException(nameof(sortBy));
             }
 
             // support sorting by multiple fields; e.g. "+name,-age" ==> Sort by Name ASC, then Age DESC
             var listSortBy = sortBy.Split(",");
-            listSortBy = listSortBy.Select(item => AdjustDirection(item)).ToArray();
+            listSortBy = listSortBy.Select(AdjustDirection).ToArray();
 
             var sortExpression = string.Join(",", listSortBy);
 
@@ -29,7 +29,7 @@ namespace Gov.Jag.Embc.Public.Utils
             {
                 source = source.OrderBy(sortExpression);
             }
-            catch (ParseException ex)
+            catch (ParseException)
             {
                 // sortBy included field not part of the model - Ignore
             }
@@ -46,7 +46,7 @@ namespace Gov.Jag.Embc.Public.Utils
             // parse direction and field from provided sort-item
             // e.g. "name" ==> direction: ASC, field: name
             // e.g. "-name" ==> direction: DESC, field: name
-            if (item.StartsWith("-"))
+            if (item.StartsWith("-", StringComparison.OrdinalIgnoreCase))
             {
                 direction = "-";
                 field = item.Substring(1);
@@ -62,7 +62,7 @@ namespace Gov.Jag.Embc.Public.Utils
 
                 default:
                     return field;
-            };
+            }
         }
     }
 }
diff --git a/embc-app/Utils/LoggingEvents.cs b/embc-app/Utils/LoggingEvents.cs
deleted file mode 100644
index c03e924..0000000
--- a/embc-app/Utils/LoggingEvents.cs
+++ /dev/null
@@ -1,25 +0,0 @@
-ï»¿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Threading.Tasks;
-
-namespace Gov.Jag.Embc.Public.Utils
-{
-    public static class LoggingEvents
-    {
-        public const int HttpGet = 1000;
-        public const int HttpPost = 1001;
-        public const int HttpPut = 1002;
-        public const int HttpDelete = 1003;
-
-        public const int Get = 2000;
-        public const int Save = 2001;
-        public const int Update = 2002;
-        public const int Delete = 2003;
-
-        public const int NotFound = 4000;
-
-        public const int Error = 5000;
-        public const int BadRequest = 5001;
-    }
-}
diff --git a/embc-app/Utils/TestUtility.cs b/embc-app/Utils/TestUtility.cs
deleted file mode 100644
index 0554c58..0000000
--- a/embc-app/Utils/TestUtility.cs
+++ /dev/null
@@ -1,20 +0,0 @@
-ï»¿using System;
-using System.Reflection;
-
-namespace Gov.Jag.Embc.Public.Utils
-{
-    public class TestUtility
-    {
-		public static bool InUnitTestMode()
-        {
-            foreach (var assem in Assembly.GetEntryAssembly().GetReferencedAssemblies())
-            {
-                if (assem.FullName.ToLowerInvariant().StartsWith("microsoft.testplatform"))
-                {
-                    return true;
-                }
-            }
-            return false;
-        }
-    }
-}
diff --git a/embc-app/embc-app.csproj b/embc-app/embc-app.csproj
index b8f6b75..ab29312 100644
--- a/embc-app/embc-app.csproj
+++ b/embc-app/embc-app.csproj
@@ -16,6 +16,11 @@
 	<ProjectGuid>{8FE0A3D0-B466-41E3-91A9-3AB6207C15E5}</ProjectGuid>
   </PropertyGroup>
 
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
+    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
+    <WarningsAsErrors />
+  </PropertyGroup>
+
   <ItemGroup>
     <PackageReference Include="Microsoft.AspNetCore.All" Version="2.1.5" />
     <PackageReference Include="Microsoft.AspNetCore.HealthChecks" Version="1.0.0" />
-- 
2.17.1

