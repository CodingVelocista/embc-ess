import { FormGroup } from '@angular/forms';

/**
 * @description
 * Helper class for validating Reactive Forms.
 * Implemented as a class, not a service, so it can retain state for multiple forms.
 *
 * @usageNotes
 * Provide a set of validation messages with the following structure:
 *
 * ```typescript
 * {
 *   productName: {
 *     required: 'Product name is required.',
 *     minlength: 'Product name must be at least three characters.',
 *     maxlength: 'Product name cannot exceed 50 characters.'
 *   },
 *   starRating: {
 *     range: 'Rate the product between 1 (lowest) and 5 (highest).'
 *   },
 *  ...
 * }
 * ```
 */
export class ValidationHelper {

  constructor(private validationMessages: { [key: string]: { [key: string]: string | { [key: string]: string } } }) { }

  /**
   * @description
   * Processes each control within a FormGroup and returns an object
   * containing any errors generated by failing validation.
   *
   * ### Return value
   *
   * ```typescript
   * {
   *   productName: 'Product name cannot exceed 50 characters.',
   *   starRating: 'Rate the product between 1 (lowest) and 5 (highest).',
   *   ...
   * }
   * ```
   *
   * @returns An object containing any errors generated by failing validation.
   */
  processMessages(container: FormGroup, parentName?: string): { [key: string]: string | { [key: string]: string } } {
    // the object to return
    const feedback = {};

    // walk over all controls in the form checking for validation errors.
    for (const controlName in container.controls) {
      if (container.controls.hasOwnProperty(controlName)) {
        const c = container.controls[controlName];

        if (c instanceof FormGroup) {
          // process child controls.
          const childMessages = this.processMessages(c, controlName);
          feedback[controlName] = { ...childMessages };
        } else {
          // this only goes one-level deep but we don't nest our forms more than that
          const parentMessages = this.validationMessages[parentName] || {};
          const controlMessages = parentName ? parentMessages[controlName] : this.validationMessages[controlName];

          // only validate if there are validation messages for the control
          if (controlMessages) {
            feedback[controlName] = '';
            if (c.errors) {
              Object.keys(c.errors).forEach(k => {
                if (controlMessages[k]) {
                  feedback[controlName] += controlMessages[k] + ' ';
                }
              });
            }
          }
        }
      }
    }
    return feedback;
  }
}
